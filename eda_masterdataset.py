# -*- coding: utf-8 -*-
"""EDA_Masterdataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TeG0eLMbNb6_ySEPvynuTOoo7ZiQefm9
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/drive/MyDrive/Copy of masterdataset.csv')

df

df.info()

df.duplicated().sum()

df.isnull().sum()

import matplotlib.pyplot as plt

# Calculate the number of null values in each column
null_counts = df.isnull().sum()

# Plot the distribution of null values
plt.figure(figsize=(25, 25))
null_counts.plot(kind='bar')
plt.title('Distribution of Null Values in Each Column')
plt.xlabel('Columns')
plt.ylabel('Number of Null Values')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

total_rows = len(df)
null_percentages = (df.isnull().sum() / total_rows) * 100

# Plot the distribution of null values in terms of percentages
plt.figure(figsize=(30, 6))
null_percentages.plot(kind='bar')
plt.title('Distribution of Null Values in Each Column (Percentage)')
plt.xlabel('Columns')
plt.ylabel('Percentage of Null Values')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

df.describe()

df.nunique()

plt.figure(figsize=(20, 16));
sns.heatmap(df.isnull(), cmap='viridis')
plt.show()

cols=['ACS_AVG_HH_SIZE',
'ACS_GINI_INDEX',
'ACS_MEDIAN_AGE',
'ACS_MEDIAN_AGE_FEMALE',
'ACS_MEDIAN_AGE_MALE',
'ACS_MEDIAN_HH_INC',
'ACS_MEDIAN_HH_INC_AIAN',
'ACS_MEDIAN_HH_INC_ASIAN',
'ACS_MEDIAN_HH_INC_BLACK',
'ACS_MEDIAN_HH_INC_HISP',
'ACS_MEDIAN_HH_INC_MULTI',
'ACS_MEDIAN_HH_INC_NHPI',
'ACS_MEDIAN_HH_INC_OTHER',
'ACS_MEDIAN_HH_INC_WHITE',
'ACS_MEDIAN_INC_F',
'ACS_MEDIAN_INC_M',
'ACS_MEDIAN_NONVET_INC',
'ACS_MEDIAN_VET_INC',
'ACS_PCT_AGE_0_17',
'ACS_PCT_AGE_0_4',
'ACS_PCT_AGE_10_14',
'ACS_PCT_AGE_15_17',
'ACS_PCT_AGE_18_29',
'ACS_PCT_AGE_18_44',
'ACS_PCT_AGE_30_44',
'ACS_PCT_AGE_45_64',
'ACS_PCT_AGE_50_64',
'ACS_PCT_AGE_5_9',
'ACS_PCT_AGE_ABOVE65',
'ACS_PCT_AGE_ABOVE80',
'ACS_PCT_AIAN',
'ACS_PCT_AIAN_COMB',
'ACS_PCT_AIAN_FEMALE',
'ACS_PCT_AIAN_MALE',
'ACS_PCT_AIAN_NONHISP',
'ACS_PCT_API_LANG',
'ACS_PCT_ASIAN',
'ACS_PCT_ASIAN_COMB',
'ACS_PCT_ASIAN_FEMALE',
'ACS_PCT_ASIAN_MALE',
'ACS_PCT_ASIAN_NONHISP',
'ACS_PCT_BACHELOR_DGR',
'ACS_PCT_BLACK',
'ACS_PCT_BLACK_COMB',
'ACS_PCT_BLACK_FEMALE',
'ACS_PCT_BLACK_MALE',
'ACS_PCT_BLACK_NONHISP',
'ACS_PCT_CHILDREN_GRANDPARENT',
'ACS_PCT_CHILD_1FAM',
'ACS_PCT_CHILD_DISAB',
'ACS_PCT_COLLEGE_ASSOCIATE_DGR',
'ACS_PCT_COMMT_15MIN',
'ACS_PCT_COMMT_29MIN',
'ACS_PCT_COMMT_59MIN',
'ACS_PCT_COMMT_60MINUP',
'ACS_PCT_DISABLE',
'ACS_PCT_ENGL_NOT_ALL',
'ACS_PCT_ENGL_NOT_WELL',
'ACS_PCT_FOREIGN_BORN',
'ACS_PCT_GRADUATE_DGR',
'ACS_PCT_HEALTH_INC_138_199',
'ACS_PCT_HEALTH_INC_200_399',
'ACS_PCT_HEALTH_INC_ABOVE400',
'ACS_PCT_HEALTH_INC_BELOW137',
'ACS_PCT_HH_1PERS',
'ACS_PCT_HH_ABOVE65',
'ACS_PCT_HH_ALONE_ABOVE65',
'ACS_PCT_HH_BROADBAND',
'ACS_PCT_HH_BROADBAND_ANY',
'ACS_PCT_HH_BROADBAND_ONLY',
'ACS_PCT_HH_CELLULAR',
'ACS_PCT_HH_CELLULAR_ONLY',
'ACS_PCT_HH_DIAL_INTERNET_ONLY',
'ACS_PCT_HH_FOOD_STMP',
'ACS_PCT_HH_FOOD_STMP_BLW_POV',
'ACS_PCT_HH_INC_10000',
'ACS_PCT_HH_INC_100000',
'ACS_PCT_HH_INC_14999',
'ACS_PCT_HH_INC_24999',
'ACS_PCT_HH_INC_49999',
'ACS_PCT_HH_INC_99999',
'ACS_PCT_HH_INTERNET',
'ACS_PCT_HH_INTERNET_NO_SUBS',
'ACS_PCT_HH_LIMIT_ENGLISH',
'ACS_PCT_HH_NO_COMP_DEV',
'ACS_PCT_HH_NO_FD_STMP_BLW_POV',
'ACS_PCT_HH_NO_INTERNET',
'ACS_PCT_HH_OTHER_COMP',
'ACS_PCT_HH_OTHER_COMP_ONLY',
'ACS_PCT_HH_PC',
'ACS_PCT_HH_PC_ONLY',
'ACS_PCT_HH_PUB_ASSIST',
'ACS_PCT_HH_SAT_INTERNET',
'ACS_PCT_HH_SMARTPHONE',
'ACS_PCT_HH_SMARTPHONE_ONLY',
'ACS_PCT_HH_TABLET',
'ACS_PCT_HH_TABLET_ONLY',
'ACS_PCT_HS_GRADUATE',
'ACS_PCT_HU_MOBILE_HOME',
'ACS_PCT_HU_NO_VEH',
'ACS_PCT_LT_HS',
'ACS_PCT_MEDICAID_ANY',
'ACS_PCT_MEDICAID_ANY_BELOW64',
'ACS_PCT_MEDICARE_ONLY',
'ACS_PCT_MULT_RACE',
'ACS_PCT_NONVET_DISABLE_18_64',
'ACS_PCT_OTHER_INS',
'ACS_PCT_OWNER_HU_COST_30PCT',
'ACS_PCT_OWNER_HU_COST_50PCT',
'ACS_PCT_POSTHS_ED',
'ACS_PCT_PRIVATE_ANY',
'ACS_PCT_PRIVATE_ANY_BELOW64',
'ACS_PCT_PRIVATE_EMPL',
'ACS_PCT_PRIVATE_EMPL_BELOW64',
'ACS_PCT_PRIVATE_MDCR',
'ACS_PCT_PRIVATE_MDCR_35_64',
'ACS_PCT_PRIVATE_OTHER',
'ACS_PCT_PRIVATE_OTHER_BELOW64',
'ACS_PCT_PRIVATE_SELF',
'ACS_PCT_PRIVATE_SELF_BELOW64',
'ACS_PCT_PUBLIC_OTHER',
'ACS_PCT_PUBLIC_ONLY',
'ACS_PCT_PUBLIC_OTHER_BELOW64',
'ACS_PCT_PUBL_TRANSIT',
'ACS_PCT_PUB_COMMT_15MIN',
'ACS_PCT_PUB_COMMT_29MIN',
'ACS_PCT_PUB_COMMT_59MIN',
'ACS_PCT_PUB_COMMT_60MINUP',
'ACS_PCT_PVT_EMPL_DRCT',
'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
'ACS_PCT_RENTER_HU_ABOVE65',
'ACS_PCT_RENTER_HU_COST_30PCT',
'ACS_PCT_RENTER_HU_COST_50PCT',
'ACS_PCT_SELF_MDCR_ABOVE35',
'ACS_PCT_TAXICAB_2WORK',
'ACS_PCT_TRICARE_VA',
'ACS_PCT_TRICARE_VA_BELOW64',
'ACS_PCT_UNEMPLOY',
'ACS_PCT_UNINSURED',
'ACS_PCT_UNINSURED_BELOW64',
'ACS_PCT_VET',
'ACS_PCT_VET_BACHELOR',
'ACS_PCT_VET_COLLEGE',
'ACS_PCT_VET_DISABLE_18_64',
'ACS_PCT_VET_HS',
'ACS_PCT_VET_LABOR_FORCE_18_64',
'ACS_PCT_VET_POV_18_64',
'ACS_PCT_VET_UNEMPL_18_64',
'ACS_PCT_WALK_2WORK',
'ACS_PCT_WHITE',
'ACS_PCT_WORK_NO_CAR',
'ACS_PER_CAPITA_INC',
'ACS_TOT_CIVIL_VET_POP',
'ACS_TOT_CIVIL_VET_POP_ABOVE25',
'ACS_TOT_GRANDCHILDREN_GP',
'ACS_TOT_HH',
'ACS_TOT_HU',
'ACS_TOT_POP_16_19',
'ACS_TOT_POP_ABOVE15',
'ACS_TOT_POP_ABOVE16',
'ACS_TOT_POP_ABOVE25',
'ACS_TOT_POP_ABOVE5',
'ACS_TOT_POP_US_ABOVE1',
'ACS_TOT_POP_WT',
'ACS_TOT_WORKER_NWFH'
]

fig = plt.figure(figsize=(30,30))

counter = 0

for col in cols:
    sub = fig.add_subplot(20,10,counter+1)
    g = sns.kdeplot(x=col,data=df,fill=True)
    plt.xticks()
    plt.show()
    counter = counter + 1

df["STATE"].nunique()

grouped_df = df.groupby("STATE")

import matplotlib.pyplot as plt

# Group the DataFrame by the "STATE" column
grouped_df = df.groupby("STATE")

# Calculate the median values for each state
median_values = grouped_df.median()

# Plot the median values for each state
plt.figure(figsize=(20, 10))  # Adjust figure size as needed

for column in median_values.columns:
    plt.plot(median_values.index, median_values[column], label=column)

    plt.xlabel("State")
    plt.ylabel(f"Median Value of{column}")
    plt.title(f"Median Values Across States for {column}")
    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability

    plt.tight_layout()
    plt.show()

# Calculate the percentage of NaN values in each column
nan_percentages = (df.isnull().sum() / len(df)) * 100

# Filter out columns with NaN percentage greater than 50%
columns_to_drop = nan_percentages[nan_percentages > 50].index

# Store the names of the columns dropped
dropped_columns = list(columns_to_drop)

# Drop the columns from the DataFrame
df_cleaned=df.drop(columns=columns_to_drop)

dropped_columns

df_cleaned.columns

col=['ACS_AVG_HH_SIZE',
'ACS_GINI_INDEX',
'ACS_MEDIAN_AGE',
'ACS_MEDIAN_AGE_FEMALE',
'ACS_MEDIAN_AGE_MALE',
'ACS_MEDIAN_HH_INC',
'ACS_MEDIAN_HH_INC_HISP',
'ACS_MEDIAN_HH_INC_WHITE',
'ACS_MEDIAN_INC_F',
'ACS_MEDIAN_INC_M',
'ACS_MEDIAN_NONVET_INC',
'ACS_MEDIAN_VET_INC',
'ACS_PCT_AGE_0_17',
'ACS_PCT_AGE_0_4',
'ACS_PCT_AGE_10_14',
'ACS_PCT_AGE_15_17',
'ACS_PCT_AGE_18_29',
'ACS_PCT_AGE_18_44',
'ACS_PCT_AGE_30_44',
'ACS_PCT_AGE_45_64',
'ACS_PCT_AGE_50_64',
'ACS_PCT_AGE_5_9',
'ACS_PCT_AGE_ABOVE65',
'ACS_PCT_AGE_ABOVE80',
'ACS_PCT_AIAN',
'ACS_PCT_AIAN_COMB',
'ACS_PCT_AIAN_FEMALE',
'ACS_PCT_AIAN_MALE',
'ACS_PCT_AIAN_NONHISP',
'ACS_PCT_API_LANG',
'ACS_PCT_ASIAN',
'ACS_PCT_ASIAN_COMB',
'ACS_PCT_ASIAN_FEMALE',
'ACS_PCT_ASIAN_MALE',
'ACS_PCT_ASIAN_NONHISP',
'ACS_PCT_BACHELOR_DGR',
'ACS_PCT_BLACK',
'ACS_PCT_BLACK_COMB',
'ACS_PCT_BLACK_FEMALE',
'ACS_PCT_BLACK_MALE',
'ACS_PCT_BLACK_NONHISP',
'ACS_PCT_CHILDREN_GRANDPARENT',
'ACS_PCT_CHILD_1FAM',
'ACS_PCT_CHILD_DISAB',
'ACS_PCT_COLLEGE_ASSOCIATE_DGR',
'ACS_PCT_COMMT_15MIN',
'ACS_PCT_COMMT_29MIN',
'ACS_PCT_COMMT_59MIN',
'ACS_PCT_COMMT_60MINUP',
'ACS_PCT_DISABLE',
'ACS_PCT_ENGL_NOT_ALL',
'ACS_PCT_ENGL_NOT_WELL',
'ACS_PCT_FOREIGN_BORN',
'ACS_PCT_GRADUATE_DGR',
'ACS_PCT_HEALTH_INC_138_199',
'ACS_PCT_HEALTH_INC_200_399',
'ACS_PCT_HEALTH_INC_ABOVE400',
'ACS_PCT_HEALTH_INC_BELOW137',
'ACS_PCT_HH_1PERS',
'ACS_PCT_HH_ABOVE65',
'ACS_PCT_HH_ALONE_ABOVE65',
'ACS_PCT_HH_BROADBAND',
'ACS_PCT_HH_BROADBAND_ANY',
'ACS_PCT_HH_BROADBAND_ONLY',
'ACS_PCT_HH_CELLULAR',
'ACS_PCT_HH_CELLULAR_ONLY',
'ACS_PCT_HH_DIAL_INTERNET_ONLY',
'ACS_PCT_HH_FOOD_STMP',
'ACS_PCT_HH_FOOD_STMP_BLW_POV',
'ACS_PCT_HH_INC_10000',
'ACS_PCT_HH_INC_100000',
'ACS_PCT_HH_INC_14999',
'ACS_PCT_HH_INC_24999',
'ACS_PCT_HH_INC_49999',
'ACS_PCT_HH_INC_99999',
'ACS_PCT_HH_INTERNET',
'ACS_PCT_HH_INTERNET_NO_SUBS',
'ACS_PCT_HH_LIMIT_ENGLISH',
'ACS_PCT_HH_NO_COMP_DEV',
'ACS_PCT_HH_NO_FD_STMP_BLW_POV',
'ACS_PCT_HH_NO_INTERNET',
'ACS_PCT_HH_OTHER_COMP',
'ACS_PCT_HH_OTHER_COMP_ONLY',
'ACS_PCT_HH_PC',
'ACS_PCT_HH_PC_ONLY',
'ACS_PCT_HH_PUB_ASSIST',
'ACS_PCT_HH_SAT_INTERNET',
'ACS_PCT_HH_SMARTPHONE',
'ACS_PCT_HH_SMARTPHONE_ONLY',
'ACS_PCT_HH_TABLET',
'ACS_PCT_HH_TABLET_ONLY',
'ACS_PCT_HS_GRADUATE',
'ACS_PCT_HU_MOBILE_HOME',
'ACS_PCT_HU_NO_VEH',
'ACS_PCT_LT_HS',
'ACS_PCT_MEDICAID_ANY',
'ACS_PCT_MEDICAID_ANY_BELOW64',
'ACS_PCT_MEDICARE_ONLY',
'ACS_PCT_MULT_RACE',
'ACS_PCT_NONVET_DISABLE_18_64',
'ACS_PCT_OTHER_INS',
'ACS_PCT_OWNER_HU_COST_30PCT',
'ACS_PCT_OWNER_HU_COST_50PCT',
'ACS_PCT_POSTHS_ED',
'ACS_PCT_PRIVATE_ANY',
'ACS_PCT_PRIVATE_ANY_BELOW64',
'ACS_PCT_PRIVATE_EMPL',
'ACS_PCT_PRIVATE_EMPL_BELOW64',
'ACS_PCT_PRIVATE_MDCR',
'ACS_PCT_PRIVATE_MDCR_35_64',
'ACS_PCT_PRIVATE_OTHER',
'ACS_PCT_PRIVATE_OTHER_BELOW64',
'ACS_PCT_PRIVATE_SELF',
'ACS_PCT_PRIVATE_SELF_BELOW64',
'ACS_PCT_PUBLIC_OTHER',
'ACS_PCT_PUBLIC_ONLY',
'ACS_PCT_PUBLIC_OTHER_BELOW64',
'ACS_PCT_PUBL_TRANSIT',
'ACS_PCT_PUB_COMMT_15MIN',
'ACS_PCT_PUB_COMMT_29MIN',
'ACS_PCT_PUB_COMMT_59MIN',
'ACS_PCT_PUB_COMMT_60MINUP',
'ACS_PCT_PVT_EMPL_DRCT',
'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
'ACS_PCT_RENTER_HU_ABOVE65',
'ACS_PCT_RENTER_HU_COST_30PCT',
'ACS_PCT_RENTER_HU_COST_50PCT',
'ACS_PCT_SELF_MDCR_ABOVE35',
'ACS_PCT_TAXICAB_2WORK',
'ACS_PCT_TRICARE_VA',
'ACS_PCT_TRICARE_VA_BELOW64',
'ACS_PCT_UNEMPLOY',
'ACS_PCT_UNINSURED',
'ACS_PCT_UNINSURED_BELOW64',
'ACS_PCT_VET',
'ACS_PCT_VET_BACHELOR',
'ACS_PCT_VET_COLLEGE',
'ACS_PCT_VET_DISABLE_18_64',
'ACS_PCT_VET_HS',
'ACS_PCT_VET_LABOR_FORCE_18_64',
'ACS_PCT_VET_POV_18_64',
'ACS_PCT_VET_UNEMPL_18_64',
'ACS_PCT_WALK_2WORK',
'ACS_PCT_WHITE',
'ACS_PCT_WORK_NO_CAR',
'ACS_PER_CAPITA_INC',
'ACS_TOT_CIVIL_VET_POP',
'ACS_TOT_CIVIL_VET_POP_ABOVE25',
'ACS_TOT_GRANDCHILDREN_GP',
'ACS_TOT_HH',
'ACS_TOT_HU',
'ACS_TOT_POP_16_19',
'ACS_TOT_POP_ABOVE15',
'ACS_TOT_POP_ABOVE16',
'ACS_TOT_POP_ABOVE25',
'ACS_TOT_POP_ABOVE5',
'ACS_TOT_POP_US_ABOVE1',
'ACS_TOT_POP_WT',
'ACS_TOT_WORKER_NWFH'
]

df[col] = df[col].fillna(df.median())

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Assuming 'X' is your data

# Calculate WCSS for different values of k
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(df[col])
    wcss.append(kmeans.inertia_)

# Plot the Elbow Method graph
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Number of clusters
n_clusters = 4

# K-means clustering
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
kmeans_cluster_labels = kmeans.fit_predict(df[col])

# Get the cluster labels
cluster_labels = kmeans.labels_

# Add the cluster labels as a new column to the DataFrame
df['Cluster_Labels'] = cluster_labels

import plotly.express as px
import pandas as pd

# Assuming 'df' is your DataFrame with cluster labels assigned
# You should have a column named 'cluster' containing the cluster labels

# Plot parallel coordinates
fig = px.parallel_coordinates(df, color="Cluster_Labels")
fig.show()

