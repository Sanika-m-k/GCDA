# -*- coding: utf-8 -*-
"""Suggestions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XLojcNB-md4o977j3tyNt2LcMhfm2A01
"""

import pandas as pd
from geopy.distance import geodesic

master_df = pd.read_csv("Regional.csv")

master_df.head()

print(list(master_df.columns))

master_df.shape

master_df = master_df[master_df['STATE']=='Arizona']

suggestions=['Suggestion_Mental_Health', 'Suggestion_Discrimination', 'Suggestion_Housing', 'Suggestion_SelfCare', 'Suggestion_FamilyConflicts', 'Suggestion_Transportation', 'Suggestion_Financial', 'Suggestion_Educational','Suggestion_Environmental', 'Suggestion_Technical']
for suggestion in suggestions:
    master_df[suggestion] = 'Low Risk - Not needed'

master_df.head()

variable_mapping = {
    'Risk_Level_Financial_RiskScore': [
        'ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_DISABLE', 'ACS_PCT_SELF_MDCR_ABOVE35',
        'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_HH_CELLULAR_ONLY',
        'ACS_PCT_OWNER_HU_COST_50PCT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
        'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ALONE_ABOVE65',
        'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_RENTER_HU_COST_30PCT',
        'ACS_PCT_PRIVATE_SELF', 'ACS_PCT_HH_BROADBAND_ONLY', 'ACS_PCT_PUBL_TRANSIT',
        'ACS_PCT_PRIVATE_SELF_BELOW64', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_HH_PC', 'ACS_PCT_UNINSURED',
        'ACS_PCT_HH_OTHER_COMP_ONLY', 'ACS_PCT_HH_NO_INTERNET', 'ACS_PCT_HH_BROADBAND',
        'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_SMARTPHONE', 'ACS_PCT_HH_TABLET', 'ACS_PCT_WALK_2WORK',
        'ACS_PCT_HH_INTERNET', 'ACS_PCT_HH_OTHER_COMP', 'ACS_PCT_PUB_COMMT_15MIN',
        'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_INTERNET_NO_SUBS', 'ACS_PCT_MEDICAID_ANY',
        'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_HH_SMARTPHONE_ONLY',
        'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_VET_DISABLE_18_64',
        'ACS_PCT_WORK_NO_CAR', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_NO_COMP_DEV',
        'ACS_PCT_PUB_COMMT_29MIN', 'ACS_PCT_PUBLIC_OTHER', 'ACS_PCT_HH_SAT_INTERNET', 'ACS_TOT_GRANDCHILDREN_GP',
        'ACS_PCT_HH_TABLET_ONLY', 'ACS_PCT_HU_NO_VEH'
    ],
    'Risk_Level_Educational_RiskScore': [
        'ACS_PCT_DISABLE', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT',
        'ACS_PCT_HH_CELLULAR_ONLY', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
        'ACS_PCT_PUBLIC_OTHER_BELOW64', 'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_HH_BROADBAND_ONLY',
        'ACS_PCT_CHILD_DISAB', 'ACS_PCT_HH_PC', 'ACS_PCT_UNINSURED', 'ACS_PCT_PUBLIC_ONLY',
        'ACS_PCT_HH_OTHER_COMP_ONLY', 'ACS_PCT_HH_NO_INTERNET', 'ACS_PCT_HH_BROADBAND',
        'ACS_PCT_HH_SMARTPHONE', 'ACS_PCT_HH_TABLET', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_HH_INTERNET',
        'ACS_PCT_HH_OTHER_COMP', 'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_INTERNET_NO_SUBS',
        'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_HH_SMARTPHONE_ONLY',
        'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_VET_DISABLE_18_64',
        'ACS_PCT_WORK_NO_CAR', 'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_NO_COMP_DEV', 'ACS_PCT_HH_SAT_INTERNET',
        'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_HH_TABLET_ONLY'
    ],
    'Risk_Level_Environmental_RiskScore': [
        'ACS_PCT_DISABLE', 'ACS_PCT_WORK_NO_CAR', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_PUB_COMMT_15MIN',
        'ACS_PCT_PUB_COMMT_29MIN', 'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_59MIN',
        'ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUB_COMMT_60MINUP'
    ],
    'Risk_Level_Technical_RiskScore': [
        'ACS_PCT_DISABLE', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_PRIVATE_EMPL',
        'ACS_PCT_HH_CELLULAR_ONLY', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
        'ACS_PCT_HH_1PERS', 'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_HH_ALONE_ABOVE65',
        'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_HH_BROADBAND_ONLY', 'ACS_PCT_CHILD_DISAB',
        'ACS_PCT_HH_PC', 'ACS_PCT_HH_OTHER_COMP_ONLY', 'ACS_PCT_HH_NO_INTERNET',
        'ACS_PCT_HH_BROADBAND', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_SMARTPHONE',
        'ACS_PCT_HH_TABLET', 'ACS_PCT_HH_INTERNET', 'ACS_PCT_HH_OTHER_COMP',
        'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_INTERNET_NO_SUBS', 'ACS_PCT_MEDICAID_ANY',
        'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_HH_SMARTPHONE_ONLY', 'ACS_PCT_VET_DISABLE_18_64',
        'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_NO_COMP_DEV', 'ACS_PCT_HH_SAT_INTERNET',
        'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_HH_TABLET_ONLY'
    ],
    'Risk_Level_Mental_Health_RiskScore': [
        'ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_DISABLE', 'ACS_PCT_CHILDREN_GRANDPARENT',
        'ACS_PCT_OWNER_HU_COST_50PCT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS',
        'ACS_PCT_PRIVATE_OTHER_BELOW64', 'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_PCT_PRIVATE_SELF',
        'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PRIVATE_SELF_BELOW64', 'ACS_PCT_CHILD_DISAB',
        'ACS_PCT_UNINSURED', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_TRICARE_VA_BELOW64',
        'ACS_PCT_TRICARE_VA', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64', 'ACS_PCT_NONVET_DISABLE_18_64',
        'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_UNINSURED_BELOW64',
        'ACS_PCT_PRIVATE_OTHER', 'ACS_PCT_VET_DISABLE_18_64', 'ACS_TOT_GRANDCHILDREN_GP',
        'ACS_PCT_PUB_COMMT_60MINUP'
    ],
    'Risk_Level_Discrimination_RiskScore': [
        'ACS_PCT_VET_DISABLE_18_64', 'ACS_PCT_DISABLE', 'ACS_PCT_NONVET_DISABLE_18_64',
        'ACS_PCT_CHILD_DISAB'
    ],
    'Risk_Level_Housing_RiskScore': [
        'ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_DISABLE', 'ACS_PCT_MEDICAID_ANY_BELOW64',
        'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_OWNER_HU_COST_50PCT', 'ACS_PCT_CHILD_1FAM',
        'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_PCT_PRIVATE_MDCR_35_64',
        'ACS_PCT_RENTER_HU_COST_30PCT', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_UNINSURED',
        'ACS_PCT_HH_ABOVE65', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_MEDICAID_ANY',
        'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_RENTER_HU_COST_50PCT',
        'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_VET_DISABLE_18_64', 'ACS_PCT_WORK_NO_CAR',
        'ACS_TOT_GRANDCHILDREN_GP'
    ],
    'Risk_Level_SelfCare_RiskScore': [
        'ACS_PCT_DISABLE', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT',
        'ACS_PCT_PRIVATE_EMPL', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_PUBLIC_OTHER_BELOW64',
        'ACS_PCT_HH_1PERS', 'ACS_PCT_PRIVATE_OTHER_BELOW64', 'ACS_PCT_HH_ALONE_ABOVE65',
        'ACS_PCT_OTHER_INS', 'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_PVT_EMPL_DRCT',
        'ACS_PCT_CHILD_DISAB', 'ACS_PCT_UNINSURED', 'ACS_PCT_HH_ABOVE65',
        'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_TRICARE_VA', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
        'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_RENTER_HU_ABOVE65',
        'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_VET_DISABLE_18_64',
        'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_PUBLIC_OTHER', 'ACS_TOT_GRANDCHILDREN_GP',
        'ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_PRIVATE_EMPL_BELOW64'
    ],
    'Risk_Level_FamilyConflicts_RiskScore': [
        'ACS_PCT_DISABLE', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT',
        'ACS_PCT_PRIVATE_EMPL', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_PRIVATE_ANY',
        'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_PVT_EMPL_DRCT',
        'ACS_PCT_CHILD_DISAB', 'ACS_PCT_PUBLIC_ONLY', 'ACS_PCT_UNINSURED', 'ACS_PCT_HH_ABOVE65',
        'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_TRICARE_VA', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
        'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_RENTER_HU_ABOVE65',
        'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_VET_DISABLE_18_64',
        'ACS_PCT_PRIVATE_ANY_BELOW64', 'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_PRIVATE_EMPL_BELOW64'
    ],
    'Risk_Level_Transportation_RiskScore': [
        'ACS_PCT_DISABLE', 'ACS_PCT_COMMT_59MIN', 'ACS_PCT_MEDICAID_ANY_BELOW64',
        'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_PRIVATE_EMPL', 'ACS_PCT_COMMT_60MINUP',
        'ACS_PCT_CHILD_1FAM', 'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_HH_1PERS', 'ACS_PCT_PRIVATE_ANY',
        'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_RENTER_HU_COST_30PCT',
        'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_UNINSURED', 'ACS_PCT_HH_ABOVE65',
        'ACS_PCT_WALK_2WORK', 'ACS_PCT_PUB_COMMT_15MIN', 'ACS_PCT_MEDICAID_ANY',
        'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_PRIVATE_MDCR',
        'ACS_PCT_COMMT_15MIN', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_VET_DISABLE_18_64',
        'ACS_PCT_WORK_NO_CAR', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_PUB_COMMT_29MIN', 'ACS_PCT_COMMT_29MIN',
        'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUB_COMMT_60MINUP'
    ]
}

# Function to calculate distance
def calculate_distance(lat1, lon1, lat2, lon2):
    return geodesic((lat1, lon1), (lat2, lon2)).kilometers

def find_closest_suggestion(category_df, lat, lon):
    distances = []
    for index, row in category_df.iterrows():
        distance = calculate_distance(lat, lon, row["latitude"], row["longitude"])
        distances.append((row, distance))
    closest_rows = sorted(distances, key=lambda x: x[1])[:2]
    return closest_rows

risks = ['Risk_Level_Mental_Health_RiskScore', 'Risk_Level_Discrimination_RiskScore', 'Risk_Level_Housing_RiskScore', 'Risk_Level_SelfCare_RiskScore', 'Risk_Level_FamilyConflicts_RiskScore', 'Risk_Level_Transportation_RiskScore', 'Risk_Level_Financial_RiskScore', 'Risk_Level_Educational_RiskScore', 'Risk_Level_Environmental_RiskScore', 'Risk_Level_Technical_RiskScore']

sheets = ['Mental.xlsx','Home.xlsx','Adult.xlsx', 'Govt.xlsx', 'Transportation.xlsx', 'Hospitals.xlsx', 'Home_Health.xlsx']
for sheet in sheets:
  df = pd.read_excel(sheet, header=0)
  df_cleaned = df.dropna(subset=['latitude','longitude'])
  df_cleaned.to_excel(sheet,index=False)

gen_suggestions = pd.read_excel ('gen_suggestion.xlsx')

from math import inf
def general_suggestion(risk_category, row):
  max_value = -inf
  for risk_level, variables in variable_mapping.items():
    if risk_level == risk_category:
      for variable in variables:
          if row[variable] > max_value:
              max_value = row[variable]
              max_column = variable
      return gen_suggestions.loc[gen_suggestions['Variable Names'] == max_column, 'Suggestions'].iloc[0]

suggestions_df_mental = pd.read_excel("Mental.xlsx",index_col=0, header=0)
suggestions_df_Home = pd.read_excel("Home.xlsx",index_col=0, header=0)
suggestions_df_Adult = pd.read_excel("Adult.xlsx",index_col=0, header=0)
suggestions_df_govt = pd.read_excel("Govt.xlsx",index_col=0, header=0)
suggestions_df_transport = pd.read_excel("Transportation.xlsx",index_col=0, header=0)
suggestions_df_HH = pd.read_excel('Home_Health.xlsx',index_col=0, header=0)
hospitals_df = pd.read_excel('Hospitals.xlsx', index_col=0, header=0)

suggestions_df_mental.head()

for index, row in master_df.head(15).iterrows():

    # Check each category against its threshold
    for risk_category in risks:
        if row[risk_category] != "low":
            if risk_category == "Risk_Level_Mental_Health_RiskScore":


                # Find closest suggestion based on Latitude and Longitude
                closest_suggestions = find_closest_suggestion(
                    suggestions_df_mental, row["Latitude"], row["Longitude"]
                )
                for suggestion, min_distance in closest_suggestions:
                    closest_suggestions_text = f"\nClosest suggestion for: \nPsychiatric Hospitals near you \n{suggestion}\n Distance: {min_distance} kms\n"


                suggestion = general_suggestion(risk_category, row)
                all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
                master_df.at[index, 'Suggestion_Mental_Health'] = all_suggestions_text

            if risk_category == "Risk_Level_SelfCare_RiskScore":
                if row["Transportation_RiskScore"] != "low":


                    closest_suggestions = find_closest_suggestion(
                    suggestions_df_Home, row["Latitude"], row["Longitude"]
                )
                    for suggestion, min_distance in closest_suggestions[:1]:
                      closest_suggestions_text = f"\nClosest suggestion for:\nHome Care services: \n{suggestion}\n Distance: {min_distance} kms"

                    closest_hospital = find_closest_suggestion(
                        hospitals_df, row["Latitude"], row["Longitude"]
                    )

                    for suggestion, min_distance in closest_hospital[:1]:
                      closest_suggestions_text = f"\nClosest Hospital: \n{suggestion}\n Distance: {min_distance} kms"

                    suggestion = general_suggestion(risk_category, row)
                    all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
                    master_df.at[index, 'Suggestion_SelfCare'] = all_suggestions_text

                else:

                    closest_suggestions = find_closest_suggestion(
                    suggestions_df_Adult, row["Latitude"], row["Longitude"]
                )
                    for suggestion, min_distance in closest_suggestions[:1]:
                      closest_suggestions_text = f"\nClosest suggestion for:\n{suggestion}\n Distance: {min_distance} kms"

                    closest_hospital = find_closest_suggestion(
                        hospitals_df, row["Latitude"], row["Longitude"]
                    )

                    for suggestion, min_distance in closest_hospital[:1]:
                      closest_suggestions_text = f"\nClosest Hospital: \n{suggestion}\n Distance: {min_distance} kms"

                    suggestion = general_suggestion(risk_category, row)
                    all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
                    master_df.at[index, 'Suggestion_SelfCare'] = all_suggestions_text

            if risk_category == "Risk_Level_Financial_RiskScore":

                # Find closest suggestion based on Latitude and Longitude
                closest_suggestions = find_closest_suggestion(
                    suggestions_df_govt, row["Latitude"], row["Longitude"]
                )

                for suggestion, min_distance in closest_suggestions:
                  closest_suggestions_text = f"\nClosest suggestion for: \nGovernment/Non profit Hosiptals: \n{suggestion}\n Distance: {min_distance} kms"

                suggestion = general_suggestion(risk_category, row)
                all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
                master_df.at[index, 'Suggestion_Financial'] = all_suggestions_text

            if (
                risk_category == "Risk_Level_Transportation_RiskScore"
            ):

                closest_suggestions = find_closest_suggestion(
                    suggestions_df_transport, row["Latitude"], row["Longitude"]
                )

                for suggestion, min_distance in closest_suggestions[:1]:
                  closest_suggestions_text = f"\nClosest suggestion for: \nHospitals with Transport Facilities: \n{suggestion}\n Distance: {min_distance} kms"

                closest_suggestions = find_closest_suggestion(
                    suggestions_df_Home, row["Latitude"], row["Longitude"]
                )
                for suggestion, min_distance in closest_suggestions[:1]:
                  closest_suggestions_text = f"\nHome care Service Providers: \n{suggestion}\n Distance: {min_distance} kms"

                suggestion = general_suggestion(risk_category, row)
                all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
                master_df.at[index, 'Suggestion_Transportation'] = all_suggestions_text

            if (
                risk_category == 'Risk_Level_Discrimination_RiskScore'
            ):
              closest_suggestions = find_closest_suggestion(
                    suggestions_df_HH, row["Latitude"], row["Longitude"]
                )
              for suggestion, min_distance in closest_suggestions[:1]:
                closest_suggestions_text = f"\nClosest suggestion for: \nHome Health Care Services: \n{suggestion}\n Distance: {min_distance} kms"

              closest_hospital = find_closest_suggestion(
                    hospitals_df, row["Latitude"], row["Longitude"]
                )

              for suggestion, min_distance in closest_hospital:
                closest_suggestions_text = f"\nClosest Hospital: \n{suggestion}\n Distance: {min_distance} kms"

              suggestion = general_suggestion(risk_category, row)
              all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
              master_df.at[index, 'Suggestion_Discrimination'] = all_suggestions_text

            if (
                risk_category == 'Risk_Level_Housing_RiskScore'
            ):

              closest_hospital = find_closest_suggestion(
                    hospitals_df, row["Latitude"], row["Longitude"]
                )

              for suggestion, min_distance in closest_hospital:
                closest_suggestions_text = f"\nClosest Hospital: \n{suggestion}\n Distance: {min_distance} kms"

              suggestion = general_suggestion(risk_category, row)
              all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
              master_df.at[index, 'Suggestion_Housing'] = all_suggestions_text

            if (
                risk_category == 'Risk_Level_FamilyConflicts_RiskScore'
            ):

              closest_hospital = find_closest_suggestion(
                    hospitals_df, row["Latitude"], row["Longitude"]
                )

              for suggestion, min_distance in closest_hospital:
                closest_suggestions_text = f"\nClosest Hospital: \n{suggestion}\n Distance: {min_distance} kms"

              suggestion = general_suggestion(risk_category, row)
              all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
              master_df.at[index, 'Suggestion_FamilyConflicts'] = all_suggestions_text

            if (
                risk_category == 'Risk_Level_Educational_RiskScore'
            ):

              closest_hospital = find_closest_suggestion(
                    hospitals_df, row["Latitude"], row["Longitude"]
                )

              for suggestion, min_distance in closest_hospital:
                closest_suggestions_text = f"\nClosest Hospital: \n{suggestion}\n Distance: {min_distance} kms"

              suggestion = general_suggestion(risk_category, row)
              all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
              master_df.at[index, 'Suggestion_Educational'] = all_suggestions_text

            if (
                risk_category == 'Risk_Level_Environmental_RiskScore'
            ):

              closest_hospital = find_closest_suggestion(
                    hospitals_df, row["Latitude"], row["Longitude"]
                )

              for suggestion, min_distance in closest_hospital:
                closest_suggestions_text = f"\nClosest Hospital: \n{suggestion}\n Distance: {min_distance} kms"

              suggestion = general_suggestion(risk_category, row)
              all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
              master_df.at[index, 'Suggestion_Environmental'] = all_suggestions_text

            if (
                risk_category == 'Risk_Level_Technical_RiskScore'
            ):

              closest_hospital = find_closest_suggestion(
                    hospitals_df, row["Latitude"], row["Longitude"]
                )

              for suggestion, min_distance in closest_hospital:
                closest_suggestions_text = f"\nClosest Hospital: \n{suggestion}\n Distance: {min_distance} kms"

              suggestion = general_suggestion(risk_category, row)
              all_suggestions_text = closest_suggestions_text + f'\nMore Suggestions: {suggestion}'
              master_df.at[index, 'Suggestion_Technical'] = all_suggestions_text

master_df.head()

from google.colab import files
master_df.to_csv('Suggestion_Arizona.csv', index=False)

# Download CSV file
files.download('Suggestion_Arizona.csv')

