# -*- coding: utf-8 -*-
"""Copy of RaceFeatureFiltering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wiYYyKpM8TDpTvfKANfJ74ZHLja4IHtz
"""

import pandas as pd
df=pd.read_csv("census_list.csv")

df.head(10)

import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter



# List of terms to search for
race_ethnicity_words = [
    "Caucasian",
    "African American",
    "Hispanic","Latino",
    "Asian",
    "Native American",
    "Pacific Islander",
    "White",
    "Black",
    "Indigenous",
    "Indigenous Peoples",
    "Indigenous Americans",
    "American Indian",
    "Alaska Native",
    "Middle Eastern",
    "Arab American",
    "Multiracial",
    "Biracial",
    "Mixed Race",
    "Non-Hispanic",
    "White Non-Hispanic",
    "Afro-Latino",
    "Afro-Caribbean",
    "Afro-American",
    "Indo-American",
    "Chinese American",
    "Japanese American",
    "Korean American",
    "Filipino American",
    "Indian American",
    "Vietnamese American",
    "Pacific Islander American",
    "Native Hawaiian",
    "Samoan American",
    "Guamanian American",
    "Chamorro",
    "Puerto Rican",
    "Cuban",
    "Dominican",
    "Mexican American",
    "Chicano",
    "Salvadoran",
    "Honduran",
    "Guatemalan",
    "Nicaraguan",
    "Colombian",
    "Venezuelan",
    "Peruvian",
    "Ecuadorian",
    "Brazilian",
    "Argentinian"
]

# Filter rows based on terms present in column 'a'
filtered_df = df[df['Variable Label'].str.contains('|'.join(race_ethnicity_words), case=False, regex=True)]

# Word-wise distribution histogram
word_counts = Counter()
for phrase in filtered_df['Variable Label']:
    for word in phrase.split():
        word_counts[word] += 1

# Plot the histogram
word_counts_df = pd.DataFrame.from_dict(word_counts, orient='index', columns=['count'])
word_counts_df.sort_values(by='count', ascending=False, inplace=True)
word_counts_df.plot(kind='bar', figsize=(12, 6))
plt.xlabel('Word')
plt.ylabel('Frequency')
plt.title('Word-wise Distribution')
plt.show()

# Display the filtered DataFrame

filtered_df.head(15)

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Generate text for word cloud from the 'Variable Label' column of the filtered DataFrame
text = ' '.join(filtered_df['Variable Label'])

# Create the WordCloud object
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

# Plot the WordCloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of Filtered Data')
plt.show()

women = [
    "Obstetrics",
    "Gynecologist"
    "Gynecology",
    "Maternity",
    "Pregnancy",
    "Prenatal",
    "Labor",
    "Delivery",
    "Birthing",
    "Neonatal",
    "Mammography",
    "Mammogram",
    "Breast",
    "Female",
    "Woman",
    "Girl",
    "Lady",
    "Divorce",
    "Separation",
    "Alimony",
    "Custody"
]

import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter

# Assuming you have a DataFrame named df containing a column 'Variable Label'

# List of terms related to women
gender = [
    "Obstetrics",
    "Male","male","widowed","pediatric"
    "Gynecologist",
    "Gynecology",
    "Maternity",
    "Pregnancy",
    "Prenatal",
    "Labor",
    "Delivery",
    "Birthing",
    "Neonatal",
    "Mammography",
    "Mammogram",
    "Breast",
    "Female",
    "Woman",
    "Girl",
    "Lady",
    "Divorce",
    "Separation",
    "Alimony",
    "Custody"
]

# Filter rows based on terms present in the 'Variable Label' column
filtered_df2 = df[df['Variable Label'].str.contains('|'.join(women), case=False, regex=True)]

# Word-wise distribution histogram
word_counts = Counter()
for phrase in filtered_df['Variable Label']:
    for word in phrase.split():
        word_counts[word] += 1

# Plot the histogram
word_counts_df = pd.DataFrame.from_dict(word_counts, orient='index', columns=['count'])
word_counts_df.sort_values(by='count', ascending=False, inplace=True)
word_counts_df.plot(kind='bar', figsize=(12, 6))
plt.xlabel('Word')
plt.ylabel('Frequency')
plt.title('Word-wise Distribution')
plt.show()

filtered_df2.head(15)

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Generate text for word cloud from the 'Variable Label' column of the filtered DataFrame
text = ' '.join(filtered_df2['Variable Label'])

# Create the WordCloud object
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

# Plot the WordCloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of Filtered Data')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter

# Assuming you have a DataFrame named df containing a column 'Variable Label'

# List of terms related to age
age_terms = ["ages", "aged", "old", "senior", "retired", "medicare","caregiver","care","support","grandparent"]

# Filter rows based on terms present in the 'Variable Label' column
filtered_df3 = df[df['Variable Label'].str.contains('|'.join(age_terms), case=False, regex=True)]

# Word-wise distribution histogram
word_counts = Counter()
for phrase in filtered_df['Variable Label']:
    for word in phrase.split():
        word_counts[word] += 1

# Plot the histogram
word_counts_df = pd.DataFrame.from_dict(word_counts, orient='index', columns=['count'])
word_counts_df.sort_values(by='count', ascending=False, inplace=True)
word_counts_df.plot(kind='bar', figsize=(12, 6))
plt.xlabel('Word')
plt.ylabel('Frequency')
plt.title('Word-wise Distribution')
plt.show()

filtered_df3.head(15)

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Generate text for word cloud from the 'Variable Label' column of the filtered DataFrame
text = ' '.join(filtered_df3['Variable Label'])

# Define the words to be excluded from the word cloud
exclude_words = ["percentage", "income", "population", "reporting"]

# Remove the excluded words from the text
text = ' '.join(word for word in text.split() if word.lower() not in exclude_words)

# Create the WordCloud object
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

# Plot the WordCloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of Filtered Data')
plt.show()

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Generate text for word cloud from the 'Variable Label' column of the filtered DataFrame
text = ' '.join(filtered_df3['Variable Label'])

# Define the words to be excluded from the word cloud
exclude_words = ["percentage", "income", "population", "reporting", "data", "file", "inflation", "workers","adjusted"]

# Remove the excluded words from the text
text = ' '.join(word for word in text.split() if word.lower() not in exclude_words)

# Define words to be made more prominent
prominent_words = {"grandparent": 100}

# Create the WordCloud object with custom parameters
wordcloud = WordCloud(width=800, height=400, background_color='white', max_font_size=200)

# Generate word cloud
wordcloud.generate_from_text(text)


# Plot the WordCloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of Filtered Data')
plt.show()

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Specify file paths within your Drive
file_path1 = '/content/drive/My Drive/prob_filtered_df1.csv'
file_path2 = '/content/drive/My Drive/prob_filtered_df2.csv'
file_path3 = '/content/drive/My Drive/prob_filtered_df3.csv'

# Save DataFrames to CSV files in your Drive
filtered_df.to_csv(file_path1, index=False)
filtered_df2.to_csv(file_path2, index=False)
filtered_df3.to_csv(file_path3, index=False)

