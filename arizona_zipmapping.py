# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17KQe3jsksuJoKRmmjJjFDftV23DuizsU
"""

import numpy as np
import pandas as pd

df=pd.read_csv('/content/drive/MyDrive/Copy of geo+risk.csv')

df

import pandas as pd
from sklearn.model_selection import train_test_split

# Assuming you have a DataFrame df containing your data
filtered_df = df[df['STATE'] == 'Arizona']

# Split the filtered data into training and testing sets

filtered_df

zip=pd.read_excel('/content/drive/MyDrive/Copy of HUD 2020 Zip Code - Census Track Crosswalk.xlsx')

zip

zip=zip[['ZIP','TRACT']]

zip

import pandas as pd

# Assuming df_filtered and zip are DataFrames
# Merge df_filtered and zip on the common columns
merged_df = pd.merge(filtered_df, zip, left_on='TRACTFIPS', right_on='TRACT', how='left')

# Display the merged DataFrame
print(merged_df)

import pandas as pd

# Assuming merged_df is the merged DataFrame
# Drop duplicate rows
merged_df = merged_df.drop_duplicates()

# Display the DataFrame after dropping duplicates
print(merged_df)

import pandas as pd

# Assuming merged_df is the merged DataFrame
# Drop duplicate rows based on 'TRACTFIPS' column
merged_df = merged_df.drop_duplicates(subset=['TRACTFIPS'])

# Display the DataFrame after dropping duplicates
print(merged_df)

import pandas as pd

# Assuming merged_df is the merged DataFrame
# Count NaN values in the 'ZIP' column
nan_count = merged_df['ZIP'].isna().sum()

# Display the count of NaN values
print("Count of NaN values in the 'ZIP' column:", nan_count)

import pandas as pd

# Assuming merged_df is the merged DataFrame
# Drop rows with NaN values in the 'ZIP' column
merged_df = merged_df.dropna(subset=['ZIP'])

# Display the DataFrame after dropping NaN values in the 'ZIP' column
print(merged_df)

merged_df[merged_df["ZIP"] == 85140.0]

merged_df

unique_zips = merged_df['ZIP'].unique()

# Display the unique values
print("Unique values in the 'ZIP' column:", unique_zips)

