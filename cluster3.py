# -*- coding: utf-8 -*-
"""Cluster3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/142ZjbaWV26HYuwTJvHPuJ56vK-vl4ic6
"""

from urllib.request import install_opener
import pandas as pd
!pip install outliers

df = pd.read_csv('df2.csv')
df

cols=['ACS_AVG_HH_SIZE',
'ACS_GINI_INDEX',
'ACS_MEDIAN_AGE',
'ACS_MEDIAN_AGE_FEMALE',
'ACS_MEDIAN_AGE_MALE',
'ACS_MEDIAN_HH_INC',
'ACS_MEDIAN_HH_INC_AIAN',
'ACS_MEDIAN_HH_INC_ASIAN',
'ACS_MEDIAN_HH_INC_BLACK',
'ACS_MEDIAN_HH_INC_HISP',
'ACS_MEDIAN_HH_INC_MULTI',
'ACS_MEDIAN_HH_INC_NHPI',
'ACS_MEDIAN_HH_INC_OTHER',
'ACS_MEDIAN_HH_INC_WHITE',
'ACS_MEDIAN_INC_F',
'ACS_MEDIAN_INC_M',
'ACS_MEDIAN_NONVET_INC',
'ACS_MEDIAN_VET_INC',
'ACS_PCT_AGE_0_17',
'ACS_PCT_AGE_0_4',
'ACS_PCT_AGE_10_14',
'ACS_PCT_AGE_15_17',
'ACS_PCT_AGE_18_29',
'ACS_PCT_AGE_18_44',
'ACS_PCT_AGE_30_44',
'ACS_PCT_AGE_45_64',
'ACS_PCT_AGE_50_64',
'ACS_PCT_AGE_5_9',
'ACS_PCT_AGE_ABOVE65',
'ACS_PCT_AGE_ABOVE80',
'ACS_PCT_AIAN',
'ACS_PCT_AIAN_COMB',
'ACS_PCT_AIAN_FEMALE',
'ACS_PCT_AIAN_MALE',
'ACS_PCT_AIAN_NONHISP',
'ACS_PCT_API_LANG',
'ACS_PCT_ASIAN',
'ACS_PCT_ASIAN_COMB',
'ACS_PCT_ASIAN_FEMALE',
'ACS_PCT_ASIAN_MALE',
'ACS_PCT_ASIAN_NONHISP',
'ACS_PCT_BACHELOR_DGR',
'ACS_PCT_BLACK',
'ACS_PCT_BLACK_COMB',
'ACS_PCT_BLACK_FEMALE',
'ACS_PCT_BLACK_MALE',
'ACS_PCT_BLACK_NONHISP',
'ACS_PCT_CHILDREN_GRANDPARENT',
'ACS_PCT_CHILD_1FAM',
'ACS_PCT_CHILD_DISAB',
'ACS_PCT_COLLEGE_ASSOCIATE_DGR',
'ACS_PCT_COMMT_15MIN',
'ACS_PCT_COMMT_29MIN',
'ACS_PCT_COMMT_59MIN',
'ACS_PCT_COMMT_60MINUP',
'ACS_PCT_DISABLE',
'ACS_PCT_ENGL_NOT_ALL',
'ACS_PCT_ENGL_NOT_WELL',
'ACS_PCT_FOREIGN_BORN',
'ACS_PCT_GRADUATE_DGR',
'ACS_PCT_HEALTH_INC_138_199',
'ACS_PCT_HEALTH_INC_200_399',
'ACS_PCT_HEALTH_INC_ABOVE400',
'ACS_PCT_HEALTH_INC_BELOW137',
'ACS_PCT_HH_1PERS',
'ACS_PCT_HH_ABOVE65',
'ACS_PCT_HH_ALONE_ABOVE65',
'ACS_PCT_HH_BROADBAND',
'ACS_PCT_HH_BROADBAND_ANY',
'ACS_PCT_HH_BROADBAND_ONLY',
'ACS_PCT_HH_CELLULAR',
'ACS_PCT_HH_CELLULAR_ONLY',
'ACS_PCT_HH_DIAL_INTERNET_ONLY',
'ACS_PCT_HH_FOOD_STMP',
'ACS_PCT_HH_FOOD_STMP_BLW_POV',
'ACS_PCT_HH_INC_10000',
'ACS_PCT_HH_INC_100000',
'ACS_PCT_HH_INC_14999',
'ACS_PCT_HH_INC_24999',
'ACS_PCT_HH_INC_49999',
'ACS_PCT_HH_INC_99999',
'ACS_PCT_HH_INTERNET',
'ACS_PCT_HH_INTERNET_NO_SUBS',
'ACS_PCT_HH_LIMIT_ENGLISH',
'ACS_PCT_HH_NO_COMP_DEV',
'ACS_PCT_HH_NO_FD_STMP_BLW_POV',
'ACS_PCT_HH_NO_INTERNET',
'ACS_PCT_HH_OTHER_COMP',
'ACS_PCT_HH_OTHER_COMP_ONLY',
'ACS_PCT_HH_PC',
'ACS_PCT_HH_PC_ONLY',
'ACS_PCT_HH_PUB_ASSIST',
'ACS_PCT_HH_SAT_INTERNET',
'ACS_PCT_HH_SMARTPHONE',
'ACS_PCT_HH_SMARTPHONE_ONLY',
'ACS_PCT_HH_TABLET',
'ACS_PCT_HH_TABLET_ONLY',
'ACS_PCT_HS_GRADUATE',
'ACS_PCT_HU_MOBILE_HOME',
'ACS_PCT_HU_NO_VEH',
'ACS_PCT_LT_HS',
'ACS_PCT_MEDICAID_ANY',
'ACS_PCT_MEDICAID_ANY_BELOW64',
'ACS_PCT_MEDICARE_ONLY',
'ACS_PCT_MULT_RACE',
'ACS_PCT_NONVET_DISABLE_18_64',
'ACS_PCT_OTHER_INS',
'ACS_PCT_OWNER_HU_COST_30PCT',
'ACS_PCT_OWNER_HU_COST_50PCT',
'ACS_PCT_POSTHS_ED',
'ACS_PCT_PRIVATE_ANY',
'ACS_PCT_PRIVATE_ANY_BELOW64',
'ACS_PCT_PRIVATE_EMPL',
'ACS_PCT_PRIVATE_EMPL_BELOW64',
'ACS_PCT_PRIVATE_MDCR',
'ACS_PCT_PRIVATE_MDCR_35_64',
'ACS_PCT_PRIVATE_OTHER',
'ACS_PCT_PRIVATE_OTHER_BELOW64',
'ACS_PCT_PRIVATE_SELF',
'ACS_PCT_PRIVATE_SELF_BELOW64',
'ACS_PCT_PUBLIC_OTHER',
'ACS_PCT_PUBLIC_ONLY',
'ACS_PCT_PUBLIC_OTHER_BELOW64',
'ACS_PCT_PUBL_TRANSIT',
'ACS_PCT_PUB_COMMT_15MIN',
'ACS_PCT_PUB_COMMT_29MIN',
'ACS_PCT_PUB_COMMT_59MIN',
'ACS_PCT_PUB_COMMT_60MINUP',
'ACS_PCT_PVT_EMPL_DRCT',
'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
'ACS_PCT_RENTER_HU_ABOVE65',
'ACS_PCT_RENTER_HU_COST_30PCT',
'ACS_PCT_RENTER_HU_COST_50PCT',
'ACS_PCT_SELF_MDCR_ABOVE35',
'ACS_PCT_TAXICAB_2WORK',
'ACS_PCT_TRICARE_VA',
'ACS_PCT_TRICARE_VA_BELOW64',
'ACS_PCT_UNEMPLOY',
'ACS_PCT_UNINSURED',
'ACS_PCT_UNINSURED_BELOW64',
'ACS_PCT_VET',
'ACS_PCT_VET_BACHELOR',
'ACS_PCT_VET_COLLEGE',
'ACS_PCT_VET_DISABLE_18_64',
'ACS_PCT_VET_HS',
'ACS_PCT_VET_LABOR_FORCE_18_64',
'ACS_PCT_VET_POV_18_64',
'ACS_PCT_VET_UNEMPL_18_64',
'ACS_PCT_WALK_2WORK',
'ACS_PCT_WHITE',
'ACS_PCT_WORK_NO_CAR',
'ACS_PER_CAPITA_INC',
'ACS_TOT_CIVIL_VET_POP',
'ACS_TOT_CIVIL_VET_POP_ABOVE25',
'ACS_TOT_GRANDCHILDREN_GP',
'ACS_TOT_HH',
'ACS_TOT_HU',
'ACS_TOT_POP_16_19',
'ACS_TOT_POP_ABOVE15',
'ACS_TOT_POP_ABOVE16',
'ACS_TOT_POP_ABOVE25',
'ACS_TOT_POP_ABOVE5',
'ACS_TOT_POP_US_ABOVE1',
'ACS_TOT_POP_WT',
'ACS_TOT_WORKER_NWFH'
]

df.nunique()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with numerical columns
# Assuming cols is a list of numerical column names
# Adjust the figsize as needed
plt.figure(figsize=(40, 40))

# Plot boxplots for each numerical column in df
sns.boxplot(data=df[cols])

# Set plot title
plt.title('Boxplots of Numerical Columns')

# Rotate x-axis labels for better readability (optional)
plt.xticks(rotation=45)

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with numerical columns
# Assuming cols is a list of numerical column names

# Set up the figure and axis
plt.figure(figsize=(10, 8))

# Iterate through each numerical column and create a boxplot
for col in cols:
    sns.boxplot(x=df[col], ax=plt.gca())  # ax=plt.gca() ensures that each boxplot is plotted on the same axis

    # Set the title for the current boxplot
    plt.title(f'Boxplot of {col}')

    # Show the plot for the current column
    plt.show()

# Function to detect outliers using IQR approach
def detect_outliers(data_column):
    """
    Calculates IQR and identifies outliers.

    Args:
        data_column (pd.Series): The data column to analyze.

    Returns:
        list: A list of outliers.
    """

    Q1 = data_column.quantile(0.25)
    Q3 = data_column.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = data_column[(data_column < lower_bound) | (data_column > upper_bound)]
    return outliers.tolist()

# Calculate and store outlier counts and percentages
outlier_data = {}
for col in cols:
    outliers = detect_outliers(df[col])
    outlier_counts = len(outliers)
    outlier_percentages = (outlier_counts / len(df[col])) * 100  # Calculate percentage
    outlier_data[col] = {'count': outlier_counts, 'percentage': outlier_percentages}

    print(col)
    print("No. of IQR-based outliers:", outlier_counts)
    print("--------------------------------")

# Plot outlier counts
plt.figure(figsize=(25, 10))
plt.bar(outlier_data.keys(), [v['count'] for v in outlier_data.values()], color='red')
plt.title('Number of Outliers in Each Column')
plt.ylabel('')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Plot outlier percentages
plt.figure(figsize=(25, 15))
plt.bar(outlier_data.keys(), [v['percentage'] for v in outlier_data.values()], color='red')
plt.title('Percentage of Outliers in Each Column')
plt.ylabel('')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

pip install outliers



from scipy.stats import zscore
from scipy.stats import norm
import numpy as np

def grubbs_test(df, alpha=0.05):
    """
    Perform the Grubbs' test for outliers detection on each column of a DataFrame.

    Parameters:
    - df: DataFrame, the input DataFrame with numerical data
    - alpha: float, significance level for the test

    Returns:
    - outliers: dict, a dictionary containing the indices of outliers detected in each column
    """
    outliers = {}
    for col in cols:
        # Compute Z-scores
        z_scores = zscore(df[col])

        # Calculate critical value
        n = len(df[col])
        t = norm.ppf(1 - alpha / (2 * n))
        threshold = (n - 1) / np.sqrt(n) * np.sqrt(t**2 / (n - 2 + t**2))

        # Find outliers
        outliers[col] = np.where(np.abs(z_scores) > threshold)[0]

    return outliers

# Usage
outliers = grubbs_test(df)
print(outliers)

plt.figure(figsize=(10, 10))
for i, col in enumerate(df[cols]):
    plt.subplot(len(df[cols])//2, 2, i+1)
    sns.boxplot(x=df[col])
    plt.title(col)
    # Mark outliers on the boxplot
    if col in outliers:
        plt.plot(outliers[col], df[col].iloc[outliers[col]], 'ro', label='Outliers')
    plt.legend()
plt.tight_layout()
plt.show()

# Concatenate the outlier indices from all columns
all_outliers = np.concatenate(list(outliers.values()))

# Drop rows containing outliers
df = df.drop(index=all_outliers)
df

import pandas as pd
import numpy as np
from scipy.stats import zscore, t
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import seaborn as sns

# Load your dataset
# Assuming your dataframe is named 'df'
# If your dataset is in a CSV file, you can use: df = pd.read_csv('your_dataset.csv')

# Extract all numeric columns for outlier detection


# Iterate over each numeric column
for col in cols:
    # Extract the relevant column for outlier detection
    data_for_detection = df[cols]

    # Standardize the data using Z-score
    data_for_detection['Z_Score'] = zscore(data_for_detection[col])

    # Apply Grubbs' test for outlier detection
    def grubbs_test(data):
        n = len(data)
        mean = np.mean(data)
        std_dev = np.std(data)
        threshold = (n - 1) / np.sqrt(n) * np.sqrt((t.ppf((1 - 0.05 / (2 * n)), n - 2)) ** 2 / (n - 2 + (t.ppf((1 - 0.05 / (2 * n)), n - 2)) ** 2))

        # Calculate the test statistic
        test_statistic = np.abs((data - mean) / std_dev)

        # Identify outliers
        outliers = test_statistic > threshold

        return outliers

    outliers_grubbs = grubbs_test(data_for_detection[col])

    # Apply Isolation Forest for outlier detection
    isolation_forest = IsolationForest(contamination=0.05)  # Adjust the contamination parameter as needed
    data_for_detection['IsolationForest'] = isolation_forest.fit_predict(data_for_detection[[col]])

    # Identify the outliers from the Isolation Forest
    outliers_isolation_forest = data_for_detection[data_for_detection['IsolationForest'] == -1]

    # Plotting the results
    plt.figure(figsize=(12, 6))

    # Grubbs' test results
    plt.subplot(1, 2, 1)
    sns.histplot(data_for_detection[col], kde=True, color='blue', label='Original Data')
    sns.histplot(data_for_detection.loc[outliers_grubbs, col], color='red', label='Grubbs\' Test Outliers')
    plt.title(f'Outlier Detection - {col} - Grubbs\' Test')
    plt.xlabel(col)
    plt.legend()

    # Isolation Forest results
    plt.subplot(1, 2, 2)
    sns.histplot(data_for_detection[col], kde=True, color='blue', label='Original Data')
    sns.histplot(data_for_detection.loc[outliers_isolation_forest.index, col], color='red', label='Isolation Forest Outliers')
    plt.title(f'Outlier Detection - {col} - Isolation Forest')
    plt.xlabel(col)
    plt.legend()

    plt.tight_layout()
    plt.show()

results = {'Column': [], 'Grubbs_Percentage': [], 'IsolationForest_Percentage': []}

# Extract all numeric columns for outlier detection
numeric_columns = df.select_dtypes(include=[np.number]).columns

# Iterate over each numeric column
for column in numeric_columns:
    # Extract the relevant column for outlier detection
    data_for_detection = df[[column]]

    # Standardize the data using Z-score
    data_for_detection['Z_Score'] = zscore(data_for_detection[column])

    # Apply Grubbs' test for outlier detection


    outliers_grubbs = grubbs_test(data_for_detection[column])

    # Apply Isolation Forest for outlier detection
    isolation_forest = IsolationForest(contamination=0.05)  # Adjust the contamination parameter as needed
    data_for_detection['IsolationForest'] = isolation_forest.fit_predict(data_for_detection[[column]])

    # Identify the outliers from the Isolation Forest
    outliers_isolation_forest = data_for_detection[data_for_detection['IsolationForest'] == -1]

    # Count the number of outliers and calculate the percentage
    num_outliers_grubbs = outliers_grubbs.sum()
    num_outliers_isolation_forest = outliers_isolation_forest.shape[0]

    total_rows = len(data_for_detection)
    percentage_grubbs = (num_outliers_grubbs / total_rows) * 100
    percentage_isolation_forest = (num_outliers_isolation_forest / total_rows) * 100

    # Save the results in the dictionary
    results['Column'].append(column)
    results['Grubbs_Percentage'].append(percentage_grubbs)
    results['IsolationForest_Percentage'].append(percentage_isolation_forest)

    # Print the results
    #print(f"Column: {column}")
    #print(f"Grubbs' Test - Number of outliers: {num_outliers_grubbs}, Percentage: {percentage_grubbs:.2f}%")
    #print(f"Isolation Forest - Number of outliers: {num_outliers_isolation_forest}, Percentage: {percentage_isolation_forest:.2f}%")
    #print("=" * 50)

# Plot the results
plt.figure(figsize=(10, 6))
plt.bar(results['Column'], results['Grubbs_Percentage'], label="Grubbs' Test")
plt.bar(results['Column'], results['IsolationForest_Percentage'], label="Isolation Forest", alpha=0.5)
plt.xlabel('Columns')
plt.ylabel('Percentage of Outliers')
plt.title('Percentage of Outliers in Each Test for Each Column')
plt.legend()
plt.show()

"""END OF EDA OF DF2

PCA OF OUTCOMES

LABELLING FEATURES TO RISKS
"""

df2 = pd.read_csv('merged_data.csv')
#df2

import pandas as pd

# Assuming df is your DataFrame containing the data

# List of output columns
output_columns = [
    'Obesity among adults aged >=18 years',
    'Current asthma among adults aged >=18 years',
    'Current smoking among adults aged >=18 years',
    'Mammography use among women aged 50-74 years',
    'Fair or poor self-rated health status among adults aged >=18 years',
    'Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years',
    'Cervical cancer screening among adult women aged 21-65 years',
    'Physical health not good for >=14 days among adults aged >=18 years',
    'Visits to dentist or dental clinic among adults aged >=18 years',
    'Hearing disability among adults aged >=18 years',
    'Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years',
    'Sleeping less than 7 hours among adults aged >=18 years',
    'No leisure-time physical activity among adults aged >=18 years',
    'Cognitive disability among adults ages >=18 years',
    'High cholesterol among adults aged >=18 years who have been screened in the past 5 years',
    'Coronary heart disease among adults aged >=18 years',
    'Depression among adults aged >=18 years',
    'High blood pressure among adults aged >=18 years',
    'Arthritis among adults aged >=18 years',
    'All teeth lost among adults aged >=65 years',
    'Cholesterol screening among adults aged >=18 years',
    'Chronic kidney disease among adults aged >=18 years',
    'Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening',
    'Mobility disability among adults aged >=18 years',
    'Diagnosed diabetes among adults aged >=18 years',
    'Independent living disability among adults aged >=18 years',
    'Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure',
    'Binge drinking among adults aged >=18 years',
    'Stroke among adults aged >=18 years',
    'Vision disability among adults aged >=18 years',
    'Self-care disability among adults aged >=18 years',
    'Cancer (excluding skin cancer) among adults aged >=18 years',
    'Visits to doctor for routine checkup within the past year among adults aged >=18 years',
    'Mental health not good for >=14 days among adults aged >=18 years',
    'Chronic obstructive pulmonary disease among adults aged >=18 years',
    'Current lack of health insurance among adults aged 18-64 years',
    'Any disability among adults aged >=18 years'
]

# Add 'TRACTFIPS' to the list of columns
output_columns_with_tractfips = ['TRACTFIPS'] + output_columns

# Fetch the columns from the DataFrame
output_df = df2[output_columns_with_tractfips]
output_df
len(output_columns)
# Now selected_columns_df contains the desired columns along with 'TRACTFIPS'

merged_df = df.merge(output_df, on='TRACTFIPS', how='inner')

merged_df = merged_df.fillna(merged_df.mean())

merged_df

data = merged_df.copy()

from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Assuming df contains your data with output columns
# Selecting only the output columns
output_data = data[output_columns]

# Standardize the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(output_data)

# Apply PCA
pca = PCA(n_components=1)  # Selecting 1 component for illustration
pca.fit(scaled_data)

# Extract the principal components
principal_components = pca.transform(scaled_data)

# Analyze loadings
loadings = pca.components_

# Transform data
transformed_outcome = pca.inverse_transform(principal_components)

data['transformed_outcome'] = principal_components

data

"""MENTAL HEALTH"""

import pandas as pd

# Assuming df is your DataFrame

# List of columns with NaN values
columns_with_nan = ["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]  # Replace with your column names

# Replace NaN values with the respective medians
for col in columns_with_nan:
    median_value = data[col].median()
    data[col].fillna(median_value, inplace=True)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[
'ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_OWNER_HU_COST_50PCT', 'ACS_PCT_PUB_COMMT_60MINUP',
    'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_CHILDREN_GRANDPARENT',
    'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_PRIVATE_OTHER', 'ACS_PCT_PRIVATE_OTHER_BELOW64',
    'ACS_PCT_PRIVATE_SELF', 'ACS_PCT_PRIVATE_SELF_BELOW64', 'ACS_PCT_PVT_EMPL_DRCT',
    'ACS_PCT_PVT_EMPL_DRCT_BELOW64', 'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64',
    'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64']]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_mental_health_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_mental_health_df['Feature'], feature_importance_mental_health_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()
print(feature_importance_mental_health_df)

Mental_Health_Features=['ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_OWNER_HU_COST_50PCT', 'ACS_PCT_PUB_COMMT_60MINUP',
    'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_CHILDREN_GRANDPARENT',
    'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_PRIVATE_OTHER', 'ACS_PCT_PRIVATE_OTHER_BELOW64',
    'ACS_PCT_PRIVATE_SELF', 'ACS_PCT_PRIVATE_SELF_BELOW64', 'ACS_PCT_PVT_EMPL_DRCT',
    'ACS_PCT_PVT_EMPL_DRCT_BELOW64', 'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64',
    'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

# Select the relevant columns from df_plotting
columns_of_interest = ['transformed_outcome'] + Mental_Health_Features
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)

pca_variable_corr1=pca_variable_corr[feature_importance_mental_health_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():

    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
Multiplying_Factor

feature_importance_mental_health_df['MF']=Multiplying_Factor
feature_importance_mental_health_df

feature_importance_mental_health_df['Weights']=feature_importance_mental_health_df['Importance']*feature_importance_mental_health_df['MF']
feature_importance_mental_health_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_mental_health_df
    for feature, weight in zip(feature_importance_mental_health_df['Feature'], feature_importance_mental_health_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_mental_health_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
data['Mental_Health_RiskScore'] = weighted_avgs

data

import matplotlib.pyplot as plt

# Plot scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(data['Mental_Health_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Mental_Health_RiskScore vs transformed_outcome')
plt.xlabel('Mental_Health_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Define the number of rows and columns for subplot arrangement
num_features = len(Mental_Health_Features)
num_cols = 3  # Number of columns per row in subplot arrangement
num_rows = (num_features + num_cols - 1) // num_cols  # Calculate the number of rows needed

# Create a new figure for the subplots
fig, axes = plt.subplots(num_rows, num_cols, figsize=(15, 5*num_rows))

# Iterate over each feature in Mental_Health_Features
for idx, feature in enumerate(Mental_Health_Features):
    # Calculate the subplot index for the current feature
    row_idx = idx // num_cols
    col_idx = idx % num_cols

    # Get the corresponding axis for the subplot
    ax = axes[row_idx, col_idx] if num_rows > 1 else axes[col_idx]

    # Plot the current feature against 'transformed_outcome'
    ax.scatter(data[feature],data['transformed_outcome'], alpha=0.5)
    ax.set_title(f'{feature} vs transformed_outcome')
    ax.set_xlabel('transformed_outcome')
    ax.set_ylabel(feature)
    ax.grid(True)

# Adjust layout to prevent overlapping
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Define the number of rows and columns for subplot arrangement
num_features = len(Mental_Health_Features)
num_cols = 3  # Number of columns per row in subplot arrangement
num_rows = (num_features + num_cols - 1) // num_cols  # Calculate the number of rows needed

# Create a new figure for the subplots
fig, axes = plt.subplots(num_rows, num_cols, figsize=(15, 5*num_rows))

# Iterate over each feature in Mental_Health_Features
for idx, feature in enumerate(Mental_Health_Features):
    # Calculate the subplot index for the current feature
    row_idx = idx // num_cols
    col_idx = idx % num_cols

    # Get the corresponding axis for the subplot
    ax = axes[row_idx, col_idx] if num_rows > 1 else axes[col_idx]

    # Plot the current feature against 'transformed_outcome'
    ax.scatter(data[feature], data['transformed_outcome'], alpha=0.5)
    ax.set_title(f'{feature} vs transformed_outcome')
    ax.set_xlabel(feature)
    ax.set_ylabel('transformed_outcome')
    ax.grid(True)

# Adjust layout to prevent overlapping
plt.tight_layout()
plt.show()

"""DISCRIMINATION"""

# Assuming df is your DataFrame
selected_columns = [
    'ACS_PCT_FOREIGN_BORN', 'ACS_PCT_WHITE', 'ACS_PCT_HISP', 'ACS_PCT_COMB',
    'ACS_PCT_OTHER_LANG', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

# Check the presence of selected columns in the DataFrame
missing_columns = [col for col in selected_columns if col not in data.columns]

if missing_columns:
    print("The following columns are missing from the DataFrame:", missing_columns)
else:
    print("All selected columns are present in the DataFrame.")

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[ 'ACS_PCT_FOREIGN_BORN', 'ACS_PCT_WHITE',
     'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_discrimination_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_discrimination_df['Feature'], feature_importance_discrimination_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()
print(feature_importance_discrimination_df)

feature_importance_discrimination_df

DiscriminationRiskFeatures = [ 'ACS_PCT_FOREIGN_BORN', 'ACS_PCT_WHITE',
     'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

# Select the relevant columns from df_plotting
columns_of_interest = ['transformed_outcome'] + DiscriminationRiskFeatures
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)

pca_variable_corr1=pca_variable_corr[feature_importance_discrimination_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_discrimination_df['MF']=Multiplying_Factor
feature_importance_discrimination_df

feature_importance_discrimination_df['Weights']=feature_importance_discrimination_df['Importance']*feature_importance_discrimination_df['MF']
feature_importance_discrimination_df

weighted_avgs = []
# Iterate over each row in data
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_discrimination_df
    for feature, weight in zip(feature_importance_discrimination_df['Feature'], feature_importance_discrimination_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_discrimination_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to data
data['Discrimination_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['Discrimination_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Discrimination_RiskScore vs transformed_outcome')
plt.xlabel('Discrimination_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()



"""HOUSING RISK"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[ 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_PRIVATE_MDCR_35_64',
    'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT',
    'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_housing_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_housing_df['Feature'], feature_importance_housing_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()
print(feature_importance_housing_df)

Housing_Risk_Features=[ 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_PRIVATE_MDCR_35_64',
    'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT',
    'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

# Select the relevant columns from data
columns_of_interest = ['transformed_outcome'] + Housing_Risk_Features
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_housing_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_housing_df['MF']=Multiplying_Factor
feature_importance_housing_df

feature_importance_housing_df['Weights']=feature_importance_housing_df['Importance']*feature_importance_housing_df['MF']
feature_importance_housing_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_housing_df
    for feature, weight in zip(feature_importance_housing_df['Feature'], feature_importance_housing_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_housing_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
data['Housing_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['Housing_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Mental_Health_RiskScore vs transformed_outcome')
plt.xlabel('Housing_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()

"""self-care risk"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[ 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64',
    'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY',
    'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_OTHER_INS',
    'ACS_PCT_PRIVATE_EMPL', 'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR',
    'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_PRIVATE_OTHER_BELOW64', 'ACS_PCT_PUBLIC_OTHER',
    'ACS_PCT_PUBLIC_OTHER_BELOW64', 'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64',
    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_TOT_GRANDCHILDREN_GP'
]]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_self_care_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_self_care_df['Feature'], feature_importance_self_care_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()
print(feature_importance_self_care_df)

SelfCareRisk_Features= [ 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64',
    'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY',
    'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_OTHER_INS',
    'ACS_PCT_PRIVATE_EMPL', 'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR',
    'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_PRIVATE_OTHER_BELOW64', 'ACS_PCT_PUBLIC_OTHER',
    'ACS_PCT_PUBLIC_OTHER_BELOW64', 'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64',
    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_TOT_GRANDCHILDREN_GP'
]

# Select the relevant columns from df_plotting
columns_of_interest = ['transformed_outcome'] + SelfCareRisk_Features
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_self_care_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_self_care_df['MF']=Multiplying_Factor
feature_importance_self_care_df

feature_importance_self_care_df['Weights']=feature_importance_self_care_df['Importance']*feature_importance_self_care_df['MF']
feature_importance_self_care_df

weighted_avgs = []
# Iterate over each row in data
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_self_care_df['Feature'], feature_importance_self_care_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_self_care_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to data
data['SelfCare_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['SelfCare_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Mental_Health_RiskScore vs transformed_outcome')
plt.xlabel('SelfCare_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()

"""family conflict risk"""

selected_columns = [  'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64',
    'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_ANY_BELOW64', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64',
    'ACS_PCT_PUBLIC_ONLY', 'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED',
    'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM',
    'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_PCT_HH_KID_1PRNT',
    'ACS_TOT_GRANDCHILDREN_GP', 'ACS_DIVORCED', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'

]

# Check the presence of selected columns in the DataFrame
missing_columns = [col for col in selected_columns if col not in data.columns]

if missing_columns:
    print("The following columns are missing from the DataFrame:", missing_columns)
else:
    print("All selected columns are present in the DataFrame.")

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[  'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64',
    'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_ANY_BELOW64', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64',
    'ACS_PCT_PUBLIC_ONLY', 'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED',
    'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM',
    'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP',  'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_family_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_family_df['Feature'], feature_importance_family_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()
print(feature_importance_family_df)

FamilyConflictRisk_Features=[   'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64',
    'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_ANY_BELOW64', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64',
    'ACS_PCT_PUBLIC_ONLY', 'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED',
    'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM',
    'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP',  'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

# Select the relevant columns from data
columns_of_interest = ['transformed_outcome'] + FamilyConflictRisk_Features
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_family_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_family_df['MF']=Multiplying_Factor
feature_importance_family_df

feature_importance_family_df['Weights']=feature_importance_family_df['Importance']*feature_importance_family_df['MF']
feature_importance_family_df

weighted_avgs = []
# Iterate over each row in data
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_family_df
    for feature, weight in zip(feature_importance_family_df['Feature'], feature_importance_family_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_family_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to data
data['FamilyConflicts_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['FamilyConflicts_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of FamilyConflict_RiskScore vs transforemd_outcome')
plt.xlabel('FamilyConflict_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()





"""transportation risk"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[ 'ACS_PCT_COMMT_15MIN', 'ACS_PCT_COMMT_29MIN', 'ACS_PCT_COMMT_59MIN', 'ACS_PCT_COMMT_60MINUP',
    'ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_15MIN', 'ACS_PCT_PUB_COMMT_29MIN',
    'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_RENTER_HU_COST_30PCT',
    'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR', 'ACS_PCT_MEDICAID_ANY',
    'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64',
    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65',
    'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64' ]]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_transportation_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_transportation_df['Feature'], feature_importance_transportation_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

print(feature_importance_transportation_df)

TransportationRisk_Features= [ 'ACS_PCT_COMMT_15MIN', 'ACS_PCT_COMMT_29MIN', 'ACS_PCT_COMMT_59MIN', 'ACS_PCT_COMMT_60MINUP',
    'ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_15MIN', 'ACS_PCT_PUB_COMMT_29MIN',
    'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_RENTER_HU_COST_30PCT',
    'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR', 'ACS_PCT_MEDICAID_ANY',
    'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64',
    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65',
    'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64' ]

# Select the relevant columns from data
columns_of_interest = ['transformed_outcome'] + TransportationRisk_Features
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
#print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_transportation_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_transportation_df['MF']=Multiplying_Factor
feature_importance_transportation_df

feature_importance_transportation_df['Weights']=feature_importance_transportation_df['Importance']*feature_importance_transportation_df['MF']
feature_importance_transportation_df

weighted_avgs = []
# Iterate over each row in data
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_transportation_df
    for feature, weight in zip(feature_importance_transportation_df['Feature'], feature_importance_transportation_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_transportation_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to data
data['Transportation_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['Transportation_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Transportation_RiskScore vs transformed_outcome')
plt.xlabel('Transportation_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()



"""LEGAL RISK"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[['ACS_PCT_FOREIGN_BORN', 'ACS_PCT_ENGL_NOT_ALL', 'ACS_PCT_ENGL_NOT_WELL',
                'ACS_PCT_HEALTH_INC_ABOVE400', 'ACS_PCT_HEALTH_INC_BELOW137', 'ACS_PCT_LT_HS',
                'ACS_PCT_POSTHS_ED', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
                'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_UNEMPLOY', 'ACS_MEDIAN_HH_INC',
                'ACS_MEDIAN_NONVET_INC', 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64',
                'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_ANY_BELOW64', 'ACS_PCT_PRIVATE_SELF',
                'ACS_PCT_PRIVATE_SELF_BELOW64', 'ACS_PCT_PUBLIC_OTHER', 'ACS_PCT_SELF_MDCR_ABOVE35',
                'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_ABOVE65',
                'ACS_PCT_HH_ALONE_ABOVE65']]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_legal_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_legal_df['Feature'], feature_importance_legal_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

print(feature_importance_legal_df)

LegalRisk_Feature = ['ACS_PCT_FOREIGN_BORN', 'ACS_PCT_ENGL_NOT_ALL', 'ACS_PCT_ENGL_NOT_WELL',
                'ACS_PCT_HEALTH_INC_ABOVE400', 'ACS_PCT_HEALTH_INC_BELOW137', 'ACS_PCT_LT_HS',
                'ACS_PCT_POSTHS_ED', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
                'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_UNEMPLOY', 'ACS_MEDIAN_HH_INC',
                'ACS_MEDIAN_NONVET_INC', 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64',
                'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_ANY_BELOW64', 'ACS_PCT_PRIVATE_SELF',
                'ACS_PCT_PRIVATE_SELF_BELOW64', 'ACS_PCT_PUBLIC_OTHER', 'ACS_PCT_SELF_MDCR_ABOVE35',
                'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_ABOVE65',
                'ACS_PCT_HH_ALONE_ABOVE65']

# Select the relevant columns from df_plotting
columns_of_interest = ['transformed_outcome'] + LegalRisk_Feature
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_legal_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_legal_df['MF']=Multiplying_Factor
feature_importance_legal_df

feature_importance_legal_df['Weights']=feature_importance_legal_df['Importance']*feature_importance_legal_df['MF']
feature_importance_legal_df

weighted_avgs = []
# Iterate over each row in data
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_legal_df
    for feature, weight in zip(feature_importance_legal_df['Feature'], feature_importance_legal_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_legal_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to data
data['Legal_RiskScore'] = weighted_avgs
data

plt.figure(figsize=(8, 6))
plt.scatter(data['Legal_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Legal_RiskScore vs transformed_outcome')
plt.xlabel('Legal_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()

"""environmental risk"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[['ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_15MIN',
                        'ACS_PCT_PUB_COMMT_29MIN', 'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_PUB_COMMT_60MINUP',
                        'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR']]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_environmental_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_environmental_df['Feature'], feature_importance_environmental_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

feature_importance_environmental_df

EnvironmentalRisk_Feature = [
     'ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_15MIN',
                        'ACS_PCT_PUB_COMMT_29MIN', 'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_PUB_COMMT_60MINUP',
                        'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR'

]

# Select the relevant columns from df_plotting
columns_of_interest = ['transformed_outcome'] + EnvironmentalRisk_Feature
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_environmental_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_environmental_df['MF']=Multiplying_Factor
feature_importance_environmental_df

feature_importance_environmental_df['Weights']=feature_importance_environmental_df['Importance']*feature_importance_environmental_df['MF']
feature_importance_environmental_df

weighted_avgs = []
# Iterate over each row in data
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_environmental_df
    for feature, weight in zip(feature_importance_environmental_df['Feature'], feature_importance_environmental_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_environmental_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to data
data['Environmental_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['Environmental_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Environmental_RiskScore vs transformed_outcome')
plt.xlabel('Environmental_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()

"""educational risk"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X_educational = data[['ACS_PCT_HH_BROADBAND', 'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_BROADBAND_ONLY',
                      'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_CELLULAR_ONLY', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
                      'ACS_PCT_HH_INTERNET', 'ACS_PCT_HH_INTERNET_NO_SUBS', 'ACS_PCT_HH_NO_COMP_DEV',
                      'ACS_PCT_HH_NO_INTERNET', 'ACS_PCT_HH_OTHER_COMP', 'ACS_PCT_HH_OTHER_COMP_ONLY',
                      'ACS_PCT_HH_PC', 'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_HH_SAT_INTERNET', 'ACS_PCT_HH_SMARTPHONE',
                      'ACS_PCT_HH_SMARTPHONE_ONLY', 'ACS_PCT_HH_TABLET', 'ACS_PCT_HH_TABLET_ONLY',
                      'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR']]


for col in X_educational.columns:
    if X_educational[col].isnull().any():
        X_educational[col] = X_educational[col].fillna(X_educational[col].mean())

X_educational_train, X_educational_test, y_train, y_test = train_test_split(X_educational, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_educational_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_educational_df = pd.DataFrame({'Feature': X_educational.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_educational_df = feature_importance_educational_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_educational_df['Feature'], feature_importance_educational_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

feature_importance_educational_df

EducationRisk_Feature = ['ACS_PCT_HH_BROADBAND', 'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_BROADBAND_ONLY',
                      'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_CELLULAR_ONLY', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
                      'ACS_PCT_HH_INTERNET', 'ACS_PCT_HH_INTERNET_NO_SUBS', 'ACS_PCT_HH_NO_COMP_DEV',
                      'ACS_PCT_HH_NO_INTERNET', 'ACS_PCT_HH_OTHER_COMP', 'ACS_PCT_HH_OTHER_COMP_ONLY',
                      'ACS_PCT_HH_PC', 'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_HH_SAT_INTERNET', 'ACS_PCT_HH_SMARTPHONE',
                      'ACS_PCT_HH_SMARTPHONE_ONLY', 'ACS_PCT_HH_TABLET', 'ACS_PCT_HH_TABLET_ONLY',
                      'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR']

# Select the relevant columns from data
columns_of_interest = ['transformed_outcome'] + EducationRisk_Feature
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_educational_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_educational_df['MF']=Multiplying_Factor
feature_importance_educational_df

feature_importance_educational_df['Weights']=feature_importance_educational_df['Importance']*feature_importance_educational_df['MF']
feature_importance_educational_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_educational_df
    for feature, weight in zip(feature_importance_educational_df['Feature'], feature_importance_educational_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_educational_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
data['Educational_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['Educational_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Educational_RiskScore vs transformed_outcome')
plt.xlabel('Educational_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()

"""financial risk"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X_financial = data[['ACS_PCT_HH_BROADBAND', 'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_BROADBAND_ONLY',
                    'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_CELLULAR_ONLY', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
                    'ACS_PCT_HH_INTERNET', 'ACS_PCT_HH_INTERNET_NO_SUBS', 'ACS_PCT_HH_NO_COMP_DEV',
                    'ACS_PCT_HH_NO_INTERNET', 'ACS_PCT_HH_OTHER_COMP', 'ACS_PCT_HH_OTHER_COMP_ONLY',
                    'ACS_PCT_HH_PC', 'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_HH_SAT_INTERNET', 'ACS_PCT_HH_SMARTPHONE',
                    'ACS_PCT_HH_SMARTPHONE_ONLY', 'ACS_PCT_HH_TABLET', 'ACS_PCT_HH_TABLET_ONLY',
                    'ACS_PCT_HU_NO_VEH', 'ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_OWNER_HU_COST_50PCT',
                    'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_15MIN', 'ACS_PCT_PUB_COMMT_29MIN',
                    'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_RENTER_HU_COST_30PCT',
                    'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR',
                    'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY',
                    'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_PRIVATE_SELF', 'ACS_PCT_PRIVATE_SELF_BELOW64',
                    'ACS_PCT_PUBLIC_OTHER', 'ACS_PCT_SELF_MDCR_ABOVE35', 'ACS_PCT_UNINSURED',
                    'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM',
                    'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_TOT_GRANDCHILDREN_GP',
                    'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64']]


for col in X_financial.columns:
    if X_financial[col].isnull().any():
        X_financial[col] = X_financial[col].fillna(X_financial[col].mean())

x_train_financial, x_test_financial, y_train_financial, y_test_financial = train_test_split(X_financial, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(x_train_financial, y_train_financial)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_financial_df = pd.DataFrame({'Feature': X_financial.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_financial_df = feature_importance_financial_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10,10))
plt.barh(feature_importance_financial_df['Feature'], feature_importance_financial_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

FinancialRisk_Features = ['ACS_PCT_HH_BROADBAND', 'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_BROADBAND_ONLY',
                    'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_CELLULAR_ONLY', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
                    'ACS_PCT_HH_INTERNET', 'ACS_PCT_HH_INTERNET_NO_SUBS', 'ACS_PCT_HH_NO_COMP_DEV',
                    'ACS_PCT_HH_NO_INTERNET', 'ACS_PCT_HH_OTHER_COMP', 'ACS_PCT_HH_OTHER_COMP_ONLY',
                    'ACS_PCT_HH_PC', 'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_HH_SAT_INTERNET', 'ACS_PCT_HH_SMARTPHONE',
                    'ACS_PCT_HH_SMARTPHONE_ONLY', 'ACS_PCT_HH_TABLET', 'ACS_PCT_HH_TABLET_ONLY',
                    'ACS_PCT_HU_NO_VEH', 'ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_OWNER_HU_COST_50PCT',
                    'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_15MIN', 'ACS_PCT_PUB_COMMT_29MIN',
                    'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_RENTER_HU_COST_30PCT',
                    'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR',
                    'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY',
                    'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_PRIVATE_SELF', 'ACS_PCT_PRIVATE_SELF_BELOW64',
                    'ACS_PCT_PUBLIC_OTHER', 'ACS_PCT_SELF_MDCR_ABOVE35', 'ACS_PCT_UNINSURED',
                    'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM',
                    'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_TOT_GRANDCHILDREN_GP',
                    'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64']

# Select the relevant columns from data
columns_of_interest = ['transformed_outcome'] + FinancialRisk_Features
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_financial_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_financial_df['MF']=Multiplying_Factor
feature_importance_financial_df

feature_importance_financial_df['Weights']=feature_importance_financial_df['Importance']*feature_importance_financial_df['MF']
feature_importance_financial_df

weighted_avgs = []
# Iterate over each row in data
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_financial_df
    for feature, weight in zip(feature_importance_financial_df['Feature'], feature_importance_financial_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_financial_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to data
data['Financial_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['Financial_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Financial_RiskScore vs transformed_outcome')
plt.xlabel('Financial_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()

"""technical risk"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X_technical = data[['ACS_PCT_HH_BROADBAND', 'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_BROADBAND_ONLY',
                    'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_CELLULAR_ONLY', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
                    'ACS_PCT_HH_INTERNET', 'ACS_PCT_HH_INTERNET_NO_SUBS', 'ACS_PCT_HH_NO_COMP_DEV',
                    'ACS_PCT_HH_NO_INTERNET', 'ACS_PCT_HH_OTHER_COMP', 'ACS_PCT_HH_OTHER_COMP_ONLY',
                    'ACS_PCT_HH_PC', 'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_HH_SAT_INTERNET', 'ACS_PCT_HH_SMARTPHONE',
                    'ACS_PCT_HH_SMARTPHONE_ONLY', 'ACS_PCT_HH_TABLET', 'ACS_PCT_HH_TABLET_ONLY',
                    'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_EMPL',
                    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65',
                    'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_DISABLE', 'ACS_PCT_CHILD_DISAB',
                    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64']]


for col in X_technical.columns:
    if X_technical[col].isnull().any():
        X_technical[col] = X_technical[col].fillna(X_technical[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X_technical, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_technical_df = pd.DataFrame({'Feature': X_technical.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_technical_df = feature_importance_technical_df.sort_values(by='Importance', ascending=False)

# Plot the feature iortances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_technical_df['Feature'], feature_importance_technical_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

TechnicalRisk_Feature = ['ACS_PCT_HH_BROADBAND', 'ACS_PCT_HH_BROADBAND_ANY', 'ACS_PCT_HH_BROADBAND_ONLY',
                    'ACS_PCT_HH_CELLULAR', 'ACS_PCT_HH_CELLULAR_ONLY', 'ACS_PCT_HH_DIAL_INTERNET_ONLY',
                    'ACS_PCT_HH_INTERNET', 'ACS_PCT_HH_INTERNET_NO_SUBS', 'ACS_PCT_HH_NO_COMP_DEV',
                    'ACS_PCT_HH_NO_INTERNET', 'ACS_PCT_HH_OTHER_COMP', 'ACS_PCT_HH_OTHER_COMP_ONLY',
                    'ACS_PCT_HH_PC', 'ACS_PCT_HH_PC_ONLY', 'ACS_PCT_HH_SAT_INTERNET', 'ACS_PCT_HH_SMARTPHONE',
                    'ACS_PCT_HH_SMARTPHONE_ONLY', 'ACS_PCT_HH_TABLET', 'ACS_PCT_HH_TABLET_ONLY',
                    'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_EMPL',
                    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65',
                    'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_DISABLE', 'ACS_PCT_CHILD_DISAB',
                    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64']

# Select the relevant columns from df_plotting
columns_of_interest = ['transformed_outcome'] + TechnicalRisk_Feature
subset_df = data[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['transformed_outcome']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_technical_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_technical_df['MF']=Multiplying_Factor
feature_importance_technical_df

feature_importance_technical_df['Weights']=feature_importance_technical_df['Importance']*feature_importance_technical_df['MF']
feature_importance_technical_df

weighted_avgs = []
# Iterate over each row in data
for idx, row in data.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_technical_df
    for feature, weight in zip(feature_importance_technical_df['Feature'], feature_importance_technical_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_technical_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to data
data['Technical_RiskScore'] = weighted_avgs

data

plt.figure(figsize=(8, 6))
plt.scatter(data['Technical_RiskScore'], data['transformed_outcome'], alpha=0.5)
plt.title('Scatter Plot of Technical_RiskScore vs transformed_outcome')
plt.xlabel('Technical_RiskScore')
plt.ylabel('transformed_outcome')
plt.grid(True)
plt.show()

data

data.columns

data

data.rename(columns={'transformed_outcome': 'PCA_Variable'}, inplace=True)

data

data.to_csv('final_data_cluster3.csv', index=False)

