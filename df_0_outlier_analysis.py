# -*- coding: utf-8 -*-
"""df_0 outlier analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m9SH734FCDl5FAi2buBxAmrJH0zGMLQ-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/drive/MyDrive/Copy of df0.csv')

df

cols=['ACS_AVG_HH_SIZE',
'ACS_GINI_INDEX',
'ACS_MEDIAN_AGE',
'ACS_MEDIAN_AGE_FEMALE',
'ACS_MEDIAN_AGE_MALE',
'ACS_MEDIAN_HH_INC',
'ACS_MEDIAN_HH_INC_AIAN',
'ACS_MEDIAN_HH_INC_ASIAN',
'ACS_MEDIAN_HH_INC_BLACK',
'ACS_MEDIAN_HH_INC_HISP',
'ACS_MEDIAN_HH_INC_MULTI',
'ACS_MEDIAN_HH_INC_NHPI',
'ACS_MEDIAN_HH_INC_OTHER',
'ACS_MEDIAN_HH_INC_WHITE',
'ACS_MEDIAN_INC_F',
'ACS_MEDIAN_INC_M',
'ACS_MEDIAN_NONVET_INC',
'ACS_MEDIAN_VET_INC',
'ACS_PCT_AGE_0_17',
'ACS_PCT_AGE_0_4',
'ACS_PCT_AGE_10_14',
'ACS_PCT_AGE_15_17',
'ACS_PCT_AGE_18_29',
'ACS_PCT_AGE_18_44',
'ACS_PCT_AGE_30_44',
'ACS_PCT_AGE_45_64',
'ACS_PCT_AGE_50_64',
'ACS_PCT_AGE_5_9',
'ACS_PCT_AGE_ABOVE65',
'ACS_PCT_AGE_ABOVE80',
'ACS_PCT_AIAN',
'ACS_PCT_AIAN_COMB',
'ACS_PCT_AIAN_FEMALE',
'ACS_PCT_AIAN_MALE',
'ACS_PCT_AIAN_NONHISP',
'ACS_PCT_API_LANG',
'ACS_PCT_ASIAN',
'ACS_PCT_ASIAN_COMB',
'ACS_PCT_ASIAN_FEMALE',
'ACS_PCT_ASIAN_MALE',
'ACS_PCT_ASIAN_NONHISP',
'ACS_PCT_BACHELOR_DGR',
'ACS_PCT_BLACK',
'ACS_PCT_BLACK_COMB',
'ACS_PCT_BLACK_FEMALE',
'ACS_PCT_BLACK_MALE',
'ACS_PCT_BLACK_NONHISP',
'ACS_PCT_CHILDREN_GRANDPARENT',
'ACS_PCT_CHILD_1FAM',
'ACS_PCT_CHILD_DISAB',
'ACS_PCT_COLLEGE_ASSOCIATE_DGR',
'ACS_PCT_COMMT_15MIN',
'ACS_PCT_COMMT_29MIN',
'ACS_PCT_COMMT_59MIN',
'ACS_PCT_COMMT_60MINUP',
'ACS_PCT_DISABLE',
'ACS_PCT_ENGL_NOT_ALL',
'ACS_PCT_ENGL_NOT_WELL',
'ACS_PCT_FOREIGN_BORN',
'ACS_PCT_GRADUATE_DGR',
'ACS_PCT_HEALTH_INC_138_199',
'ACS_PCT_HEALTH_INC_200_399',
'ACS_PCT_HEALTH_INC_ABOVE400',
'ACS_PCT_HEALTH_INC_BELOW137',
'ACS_PCT_HH_1PERS',
'ACS_PCT_HH_ABOVE65',
'ACS_PCT_HH_ALONE_ABOVE65',
'ACS_PCT_HH_BROADBAND',
'ACS_PCT_HH_BROADBAND_ANY',
'ACS_PCT_HH_BROADBAND_ONLY',
'ACS_PCT_HH_CELLULAR',
'ACS_PCT_HH_CELLULAR_ONLY',
'ACS_PCT_HH_DIAL_INTERNET_ONLY',
'ACS_PCT_HH_FOOD_STMP',
'ACS_PCT_HH_FOOD_STMP_BLW_POV',
'ACS_PCT_HH_INC_10000',
'ACS_PCT_HH_INC_100000',
'ACS_PCT_HH_INC_14999',
'ACS_PCT_HH_INC_24999',
'ACS_PCT_HH_INC_49999',
'ACS_PCT_HH_INC_99999',
'ACS_PCT_HH_INTERNET',
'ACS_PCT_HH_INTERNET_NO_SUBS',
'ACS_PCT_HH_LIMIT_ENGLISH',
'ACS_PCT_HH_NO_COMP_DEV',
'ACS_PCT_HH_NO_FD_STMP_BLW_POV',
'ACS_PCT_HH_NO_INTERNET',
'ACS_PCT_HH_OTHER_COMP',
'ACS_PCT_HH_OTHER_COMP_ONLY',
'ACS_PCT_HH_PC',
'ACS_PCT_HH_PC_ONLY',
'ACS_PCT_HH_PUB_ASSIST',
'ACS_PCT_HH_SAT_INTERNET',
'ACS_PCT_HH_SMARTPHONE',
'ACS_PCT_HH_SMARTPHONE_ONLY',
'ACS_PCT_HH_TABLET',
'ACS_PCT_HH_TABLET_ONLY',
'ACS_PCT_HS_GRADUATE',
'ACS_PCT_HU_MOBILE_HOME',
'ACS_PCT_HU_NO_VEH',
'ACS_PCT_LT_HS',
'ACS_PCT_MEDICAID_ANY',
'ACS_PCT_MEDICAID_ANY_BELOW64',
'ACS_PCT_MEDICARE_ONLY',
'ACS_PCT_MULT_RACE',
'ACS_PCT_NONVET_DISABLE_18_64',
'ACS_PCT_OTHER_INS',
'ACS_PCT_OWNER_HU_COST_30PCT',
'ACS_PCT_OWNER_HU_COST_50PCT',
'ACS_PCT_POSTHS_ED',
'ACS_PCT_PRIVATE_ANY',
'ACS_PCT_PRIVATE_ANY_BELOW64',
'ACS_PCT_PRIVATE_EMPL',
'ACS_PCT_PRIVATE_EMPL_BELOW64',
'ACS_PCT_PRIVATE_MDCR',
'ACS_PCT_PRIVATE_MDCR_35_64',
'ACS_PCT_PRIVATE_OTHER',
'ACS_PCT_PRIVATE_OTHER_BELOW64',
'ACS_PCT_PRIVATE_SELF',
'ACS_PCT_PRIVATE_SELF_BELOW64',
'ACS_PCT_PUBLIC_OTHER',
'ACS_PCT_PUBLIC_ONLY',
'ACS_PCT_PUBLIC_OTHER_BELOW64',
'ACS_PCT_PUBL_TRANSIT',
'ACS_PCT_PUB_COMMT_15MIN',
'ACS_PCT_PUB_COMMT_29MIN',
'ACS_PCT_PUB_COMMT_59MIN',
'ACS_PCT_PUB_COMMT_60MINUP',
'ACS_PCT_PVT_EMPL_DRCT',
'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
'ACS_PCT_RENTER_HU_ABOVE65',
'ACS_PCT_RENTER_HU_COST_30PCT',
'ACS_PCT_RENTER_HU_COST_50PCT',
'ACS_PCT_SELF_MDCR_ABOVE35',
'ACS_PCT_TAXICAB_2WORK',
'ACS_PCT_TRICARE_VA',
'ACS_PCT_TRICARE_VA_BELOW64',
'ACS_PCT_UNEMPLOY',
'ACS_PCT_UNINSURED',
'ACS_PCT_UNINSURED_BELOW64',
'ACS_PCT_VET',
'ACS_PCT_VET_BACHELOR',
'ACS_PCT_VET_COLLEGE',
'ACS_PCT_VET_DISABLE_18_64',
'ACS_PCT_VET_HS',
'ACS_PCT_VET_LABOR_FORCE_18_64',
'ACS_PCT_VET_POV_18_64',
'ACS_PCT_VET_UNEMPL_18_64',
'ACS_PCT_WALK_2WORK',
'ACS_PCT_WHITE',
'ACS_PCT_WORK_NO_CAR',
'ACS_PER_CAPITA_INC',
'ACS_TOT_CIVIL_VET_POP',
'ACS_TOT_CIVIL_VET_POP_ABOVE25',
'ACS_TOT_GRANDCHILDREN_GP',
'ACS_TOT_HH',
'ACS_TOT_HU',
'ACS_TOT_POP_16_19',
'ACS_TOT_POP_ABOVE15',
'ACS_TOT_POP_ABOVE16',
'ACS_TOT_POP_ABOVE25',
'ACS_TOT_POP_ABOVE5',
'ACS_TOT_POP_US_ABOVE1',
'ACS_TOT_POP_WT',
'ACS_TOT_WORKER_NWFH'
]

cols=['ACS_AVG_HH_SIZE',
'ACS_GINI_INDEX',
'ACS_MEDIAN_AGE',
'ACS_MEDIAN_AGE_FEMALE',
'ACS_MEDIAN_AGE_MALE',
'ACS_MEDIAN_HH_INC',

'ACS_MEDIAN_HH_INC_HISP',


'ACS_MEDIAN_HH_INC_WHITE',
'ACS_MEDIAN_INC_F',
'ACS_MEDIAN_INC_M',
'ACS_MEDIAN_NONVET_INC',
'ACS_MEDIAN_VET_INC',
'ACS_PCT_AGE_0_17',
'ACS_PCT_AGE_0_4',
'ACS_PCT_AGE_10_14',
'ACS_PCT_AGE_15_17',
'ACS_PCT_AGE_18_29',
'ACS_PCT_AGE_18_44',
'ACS_PCT_AGE_30_44',
'ACS_PCT_AGE_45_64',
'ACS_PCT_AGE_50_64',
'ACS_PCT_AGE_5_9',
'ACS_PCT_AGE_ABOVE65',
'ACS_PCT_AGE_ABOVE80',
'ACS_PCT_AIAN',
'ACS_PCT_AIAN_COMB',

'ACS_PCT_AIAN_NONHISP',
'ACS_PCT_API_LANG',
'ACS_PCT_ASIAN',
'ACS_PCT_ASIAN_COMB',
'ACS_PCT_ASIAN_FEMALE',
'ACS_PCT_ASIAN_MALE',
'ACS_PCT_ASIAN_NONHISP',
'ACS_PCT_BACHELOR_DGR',
'ACS_PCT_BLACK',
'ACS_PCT_BLACK_COMB',
'ACS_PCT_BLACK_FEMALE',
'ACS_PCT_BLACK_MALE',
'ACS_PCT_BLACK_NONHISP',
'ACS_PCT_CHILDREN_GRANDPARENT',
'ACS_PCT_CHILD_1FAM',
'ACS_PCT_CHILD_DISAB',
'ACS_PCT_COLLEGE_ASSOCIATE_DGR',
'ACS_PCT_COMMT_15MIN',
'ACS_PCT_COMMT_29MIN',
'ACS_PCT_COMMT_59MIN',
'ACS_PCT_COMMT_60MINUP',
'ACS_PCT_DISABLE',
'ACS_PCT_ENGL_NOT_ALL',
'ACS_PCT_ENGL_NOT_WELL',
'ACS_PCT_FOREIGN_BORN',
'ACS_PCT_GRADUATE_DGR',
'ACS_PCT_HEALTH_INC_138_199',
'ACS_PCT_HEALTH_INC_200_399',
'ACS_PCT_HEALTH_INC_ABOVE400',
'ACS_PCT_HEALTH_INC_BELOW137',
'ACS_PCT_HH_1PERS',
'ACS_PCT_HH_ABOVE65',
'ACS_PCT_HH_ALONE_ABOVE65',
'ACS_PCT_HH_BROADBAND',
'ACS_PCT_HH_BROADBAND_ANY',
'ACS_PCT_HH_BROADBAND_ONLY',
'ACS_PCT_HH_CELLULAR',
'ACS_PCT_HH_CELLULAR_ONLY',
'ACS_PCT_HH_DIAL_INTERNET_ONLY',
'ACS_PCT_HH_FOOD_STMP',
'ACS_PCT_HH_FOOD_STMP_BLW_POV',
'ACS_PCT_HH_INC_10000',
'ACS_PCT_HH_INC_100000',
'ACS_PCT_HH_INC_14999',
'ACS_PCT_HH_INC_24999',
'ACS_PCT_HH_INC_49999',
'ACS_PCT_HH_INC_99999',
'ACS_PCT_HH_INTERNET',
'ACS_PCT_HH_INTERNET_NO_SUBS',
'ACS_PCT_HH_LIMIT_ENGLISH',
'ACS_PCT_HH_NO_COMP_DEV',
'ACS_PCT_HH_NO_FD_STMP_BLW_POV',
'ACS_PCT_HH_NO_INTERNET',
'ACS_PCT_HH_OTHER_COMP',
'ACS_PCT_HH_OTHER_COMP_ONLY',
'ACS_PCT_HH_PC',
'ACS_PCT_HH_PC_ONLY',
'ACS_PCT_HH_PUB_ASSIST',
'ACS_PCT_HH_SAT_INTERNET',
'ACS_PCT_HH_SMARTPHONE',
'ACS_PCT_HH_SMARTPHONE_ONLY',
'ACS_PCT_HH_TABLET',
'ACS_PCT_HH_TABLET_ONLY',
'ACS_PCT_HS_GRADUATE',
'ACS_PCT_HU_MOBILE_HOME',
'ACS_PCT_HU_NO_VEH',
'ACS_PCT_LT_HS',
'ACS_PCT_MEDICAID_ANY',
'ACS_PCT_MEDICAID_ANY_BELOW64',
'ACS_PCT_MEDICARE_ONLY',
'ACS_PCT_MULT_RACE',
'ACS_PCT_NONVET_DISABLE_18_64',
'ACS_PCT_OTHER_INS',
'ACS_PCT_OWNER_HU_COST_30PCT',
'ACS_PCT_OWNER_HU_COST_50PCT',
'ACS_PCT_POSTHS_ED',
'ACS_PCT_PRIVATE_ANY',
'ACS_PCT_PRIVATE_ANY_BELOW64',
'ACS_PCT_PRIVATE_EMPL',
'ACS_PCT_PRIVATE_EMPL_BELOW64',
'ACS_PCT_PRIVATE_MDCR',
'ACS_PCT_PRIVATE_MDCR_35_64',
'ACS_PCT_PRIVATE_OTHER',
'ACS_PCT_PRIVATE_OTHER_BELOW64',
'ACS_PCT_PRIVATE_SELF',
'ACS_PCT_PRIVATE_SELF_BELOW64',
'ACS_PCT_PUBLIC_OTHER',
'ACS_PCT_PUBLIC_ONLY',
'ACS_PCT_PUBLIC_OTHER_BELOW64',
'ACS_PCT_PUBL_TRANSIT',
'ACS_PCT_PUB_COMMT_15MIN',
'ACS_PCT_PUB_COMMT_29MIN',
'ACS_PCT_PUB_COMMT_59MIN',
'ACS_PCT_PUB_COMMT_60MINUP',
'ACS_PCT_PVT_EMPL_DRCT',
'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
'ACS_PCT_RENTER_HU_ABOVE65',
'ACS_PCT_RENTER_HU_COST_30PCT',
'ACS_PCT_RENTER_HU_COST_50PCT',
'ACS_PCT_SELF_MDCR_ABOVE35',
'ACS_PCT_TAXICAB_2WORK',
'ACS_PCT_TRICARE_VA',
'ACS_PCT_TRICARE_VA_BELOW64',
'ACS_PCT_UNEMPLOY',
'ACS_PCT_UNINSURED',
'ACS_PCT_UNINSURED_BELOW64',
'ACS_PCT_VET',
'ACS_PCT_VET_BACHELOR',
'ACS_PCT_VET_COLLEGE',
'ACS_PCT_VET_DISABLE_18_64',
'ACS_PCT_VET_HS',
'ACS_PCT_VET_LABOR_FORCE_18_64',
'ACS_PCT_VET_POV_18_64',
'ACS_PCT_VET_UNEMPL_18_64',
'ACS_PCT_WALK_2WORK',
'ACS_PCT_WHITE',
'ACS_PCT_WORK_NO_CAR',
'ACS_PER_CAPITA_INC',
'ACS_TOT_CIVIL_VET_POP',
'ACS_TOT_CIVIL_VET_POP_ABOVE25',
'ACS_TOT_GRANDCHILDREN_GP',
'ACS_TOT_HH',
'ACS_TOT_HU',
'ACS_TOT_POP_16_19',
'ACS_TOT_POP_ABOVE15',
'ACS_TOT_POP_ABOVE16',
'ACS_TOT_POP_ABOVE25',
'ACS_TOT_POP_ABOVE5',
'ACS_TOT_POP_US_ABOVE1',
'ACS_TOT_POP_WT',
'ACS_TOT_WORKER_NWFH'
]

df.nunique()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with numerical columns
# Assuming cols is a list of numerical column names
# Adjust the figsize as needed
plt.figure(figsize=(40, 40))

# Plot boxplots for each numerical column in df
sns.boxplot(data=df[cols])

# Set plot title
plt.title('Boxplots of Numerical Columns')

# Rotate x-axis labels for better readability (optional)
plt.xticks(rotation=45)

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with numerical columns
# Assuming cols is a list of numerical column names

# Set up the figure and axis
plt.figure(figsize=(10, 8))

# Iterate through each numerical column and create a boxplot
for col in cols:
    sns.boxplot(x=df[col], ax=plt.gca())  # ax=plt.gca() ensures that each boxplot is plotted on the same axis

    # Set the title for the current boxplot
    plt.title(f'Boxplot of {col}')

    # Show the plot for the current column
    plt.show()

# Function to detect outliers using IQR approach
def detect_outliers(data_column):
    """
    Calculates IQR and identifies outliers.

    Args:
        data_column (pd.Series): The data column to analyze.

    Returns:
        list: A list of outliers.
    """

    Q1 = data_column.quantile(0.25)
    Q3 = data_column.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = data_column[(data_column < lower_bound) | (data_column > upper_bound)]
    return outliers.tolist()

# Calculate and store outlier counts and percentages
outlier_data = {}
for col in cols:
    outliers = detect_outliers(df[col])
    outlier_counts = len(outliers)
    outlier_percentages = (outlier_counts / len(df[col])) * 100  # Calculate percentage
    outlier_data[col] = {'count': outlier_counts, 'percentage': outlier_percentages}

    print(col)
    print("No. of IQR-based outliers:", outlier_counts)
    print("%age of IQR-based outliers:", outlier_percentages)
    print("--------------------------------")

# Plot outlier counts
plt.figure(figsize=(25, 10))
plt.bar(outlier_data.keys(), [v['count'] for v in outlier_data.values()], color='red')
plt.title('Number of Outliers in Each Column')
plt.ylabel('')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Plot outlier percentages
plt.figure(figsize=(25, 15))
plt.bar(outlier_data.keys(), [v['percentage'] for v in outlier_data.values()], color='red')
plt.title('Percentage of Outliers in Each Column')
plt.ylabel('')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()



cols=['ACS_AVG_HH_SIZE',
'ACS_GINI_INDEX',
'ACS_MEDIAN_AGE',
'ACS_MEDIAN_AGE_FEMALE',
'ACS_MEDIAN_AGE_MALE',
'ACS_MEDIAN_HH_INC',

'ACS_MEDIAN_HH_INC_HISP',


'ACS_MEDIAN_HH_INC_WHITE',
'ACS_MEDIAN_INC_F',
'ACS_MEDIAN_INC_M',
'ACS_MEDIAN_NONVET_INC',
'ACS_MEDIAN_VET_INC',
'ACS_PCT_AGE_0_17',
'ACS_PCT_AGE_0_4',
'ACS_PCT_AGE_10_14',
'ACS_PCT_AGE_15_17',
'ACS_PCT_AGE_18_29',
'ACS_PCT_AGE_18_44',
'ACS_PCT_AGE_30_44',
'ACS_PCT_AGE_45_64',
'ACS_PCT_AGE_50_64',
'ACS_PCT_AGE_5_9',
'ACS_PCT_AGE_ABOVE65',
'ACS_PCT_AGE_ABOVE80',
'ACS_PCT_AIAN',
'ACS_PCT_AIAN_COMB',


'ACS_PCT_AIAN_NONHISP',
'ACS_PCT_API_LANG',
'ACS_PCT_ASIAN',
'ACS_PCT_ASIAN_COMB',


'ACS_PCT_ASIAN_NONHISP',
'ACS_PCT_BACHELOR_DGR',
'ACS_PCT_BLACK',
'ACS_PCT_BLACK_COMB',
'ACS_PCT_BLACK_FEMALE',
'ACS_PCT_BLACK_MALE',
'ACS_PCT_BLACK_NONHISP',
'ACS_PCT_CHILDREN_GRANDPARENT',
'ACS_PCT_CHILD_1FAM',
'ACS_PCT_CHILD_DISAB',
'ACS_PCT_COLLEGE_ASSOCIATE_DGR',
'ACS_PCT_COMMT_15MIN',
'ACS_PCT_COMMT_29MIN',
'ACS_PCT_COMMT_59MIN',
'ACS_PCT_COMMT_60MINUP',
'ACS_PCT_DISABLE',
'ACS_PCT_ENGL_NOT_ALL',
'ACS_PCT_ENGL_NOT_WELL',
'ACS_PCT_FOREIGN_BORN',
'ACS_PCT_GRADUATE_DGR',
'ACS_PCT_HEALTH_INC_138_199',
'ACS_PCT_HEALTH_INC_200_399',
'ACS_PCT_HEALTH_INC_ABOVE400',
'ACS_PCT_HEALTH_INC_BELOW137',
'ACS_PCT_HH_1PERS',
'ACS_PCT_HH_ABOVE65',
'ACS_PCT_HH_ALONE_ABOVE65',
'ACS_PCT_HH_BROADBAND',
'ACS_PCT_HH_BROADBAND_ANY',
'ACS_PCT_HH_BROADBAND_ONLY',
'ACS_PCT_HH_CELLULAR',
'ACS_PCT_HH_CELLULAR_ONLY',
'ACS_PCT_HH_FOOD_STMP',
'ACS_PCT_HH_FOOD_STMP_BLW_POV',
'ACS_PCT_HH_INC_10000',
'ACS_PCT_HH_INC_100000',
'ACS_PCT_HH_INC_14999',
'ACS_PCT_HH_INC_24999',
'ACS_PCT_HH_INC_49999',
'ACS_PCT_HH_INC_99999',
'ACS_PCT_HH_INTERNET',
'ACS_PCT_HH_INTERNET_NO_SUBS',
'ACS_PCT_HH_LIMIT_ENGLISH',
'ACS_PCT_HH_NO_COMP_DEV',
'ACS_PCT_HH_NO_FD_STMP_BLW_POV',
'ACS_PCT_HH_NO_INTERNET',
'ACS_PCT_HH_OTHER_COMP',
'ACS_PCT_HH_OTHER_COMP_ONLY',
'ACS_PCT_HH_PC',
'ACS_PCT_HH_PC_ONLY',
'ACS_PCT_HH_PUB_ASSIST',
'ACS_PCT_HH_SAT_INTERNET',
'ACS_PCT_HH_SMARTPHONE',
'ACS_PCT_HH_SMARTPHONE_ONLY',
'ACS_PCT_HH_TABLET',
'ACS_PCT_HH_TABLET_ONLY',
'ACS_PCT_HS_GRADUATE',
'ACS_PCT_HU_MOBILE_HOME',
'ACS_PCT_HU_NO_VEH',
'ACS_PCT_LT_HS',
'ACS_PCT_MEDICAID_ANY',
'ACS_PCT_MEDICAID_ANY_BELOW64',
'ACS_PCT_MEDICARE_ONLY',
'ACS_PCT_MULT_RACE',
'ACS_PCT_NONVET_DISABLE_18_64',
'ACS_PCT_OTHER_INS',
'ACS_PCT_OWNER_HU_COST_30PCT',
'ACS_PCT_OWNER_HU_COST_50PCT',
'ACS_PCT_POSTHS_ED',
'ACS_PCT_PRIVATE_ANY',
'ACS_PCT_PRIVATE_ANY_BELOW64',
'ACS_PCT_PRIVATE_EMPL',
'ACS_PCT_PRIVATE_EMPL_BELOW64',
'ACS_PCT_PRIVATE_MDCR',
'ACS_PCT_PRIVATE_MDCR_35_64',
'ACS_PCT_PRIVATE_SELF',
'ACS_PCT_PRIVATE_SELF_BELOW64',
'ACS_PCT_PUBLIC_OTHER',
'ACS_PCT_PUBLIC_ONLY',
'ACS_PCT_PUBLIC_OTHER_BELOW64',
'ACS_PCT_PUBL_TRANSIT',

'ACS_PCT_PUB_COMMT_29MIN',
'ACS_PCT_PUB_COMMT_59MIN',
'ACS_PCT_PUB_COMMT_60MINUP',
'ACS_PCT_PVT_EMPL_DRCT',
'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
'ACS_PCT_RENTER_HU_ABOVE65',
'ACS_PCT_RENTER_HU_COST_30PCT',
'ACS_PCT_RENTER_HU_COST_50PCT',
'ACS_PCT_SELF_MDCR_ABOVE35',
'ACS_PCT_TAXICAB_2WORK',
'ACS_PCT_TRICARE_VA',
'ACS_PCT_TRICARE_VA_BELOW64',
'ACS_PCT_UNEMPLOY',
'ACS_PCT_UNINSURED',
'ACS_PCT_UNINSURED_BELOW64',
'ACS_PCT_VET',
'ACS_PCT_VET_BACHELOR',
'ACS_PCT_VET_COLLEGE',
'ACS_PCT_VET_DISABLE_18_64',
'ACS_PCT_VET_HS',
'ACS_PCT_VET_LABOR_FORCE_18_64',
'ACS_PCT_VET_POV_18_64',
'ACS_PCT_WALK_2WORK',
'ACS_PCT_WHITE',
'ACS_PCT_WORK_NO_CAR',
'ACS_PER_CAPITA_INC',
'ACS_TOT_CIVIL_VET_POP',
'ACS_TOT_CIVIL_VET_POP_ABOVE25',
'ACS_TOT_GRANDCHILDREN_GP',
'ACS_TOT_HH',
'ACS_TOT_HU',
'ACS_TOT_POP_16_19',
'ACS_TOT_POP_ABOVE15',
'ACS_TOT_POP_ABOVE16',
'ACS_TOT_POP_ABOVE25',
'ACS_TOT_POP_ABOVE5',
'ACS_TOT_POP_US_ABOVE1',
'ACS_TOT_POP_WT',
'ACS_TOT_WORKER_NWFH'
]

from scipy.stats import zscore
from scipy.stats import norm
import numpy as np

def grubbs_test(df, alpha=0.05):
    """
    Perform the Grubbs' test for outliers detection on each column of a DataFrame.

    Parameters:
    - df: DataFrame, the input DataFrame with numerical data
    - alpha: float, significance level for the test

    Returns:
    - outliers: dict, a dictionary containing the indices of outliers detected in each column
    """
    outliers = {}
    for col in cols:
        # Compute Z-scores
        z_scores = zscore(df[col])

        # Calculate critical value
        n = len(df[col])
        t = norm.ppf(1 - alpha / (2 * n))
        threshold = (n - 1) / np.sqrt(n) * np.sqrt(t**2 / (n - 2 + t**2))

        # Find outliers
        outliers[col] = np.where(np.abs(z_scores) > threshold)[0]

    return outliers

# Usage
outliers = grubbs_test(df)
print(outliers)



import pandas as pd
import numpy as np
from scipy.stats import zscore, t
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import seaborn as sns

# Load your dataset
# Assuming your dataframe is named 'df'
# If your dataset is in a CSV file, you can use: df = pd.read_csv('your_dataset.csv')

# Extract all numeric columns for outlier detection


# Iterate over each numeric column
for col in cols:
    # Extract the relevant column for outlier detection
    data_for_detection = df[cols]

    # Standardize the data using Z-score
    data_for_detection['Z_Score'] = zscore(data_for_detection[col])

    # Apply Grubbs' test for outlier detection
    def grubbs_test(data):
        n = len(data)
        mean = np.mean(data)
        std_dev = np.std(data)
        threshold = (n - 1) / np.sqrt(n) * np.sqrt((t.ppf((1 - 0.05 / (2 * n)), n - 2)) ** 2 / (n - 2 + (t.ppf((1 - 0.05 / (2 * n)), n - 2)) ** 2))

        # Calculate the test statistic
        test_statistic = np.abs((data - mean) / std_dev)

        # Identify outliers
        outliers = test_statistic > threshold

        return outliers

    outliers_grubbs = grubbs_test(data_for_detection[col])

    # Apply Isolation Forest for outlier detection
    isolation_forest = IsolationForest(contamination=0.05)  # Adjust the contamination parameter as needed
    data_for_detection['IsolationForest'] = isolation_forest.fit_predict(data_for_detection[[col]])

    # Identify the outliers from the Isolation Forest
    outliers_isolation_forest = data_for_detection[data_for_detection['IsolationForest'] == -1]

    # Plotting the results
    plt.figure(figsize=(12, 6))

    # Grubbs' test results
    plt.subplot(1, 2, 1)
    sns.histplot(data_for_detection[col], kde=True, color='blue', label='Original Data')
    sns.histplot(data_for_detection.loc[outliers_grubbs, col], color='red', label='Grubbs\' Test Outliers')
    plt.title(f'Outlier Detection - {col} - Grubbs\' Test')
    plt.xlabel(col)
    plt.legend()

    # Isolation Forest results
    plt.subplot(1, 2, 2)
    sns.histplot(data_for_detection[col], kde=True, color='blue', label='Original Data')
    sns.histplot(data_for_detection.loc[outliers_isolation_forest.index, col], color='red', label='Isolation Forest Outliers')
    plt.title(f'Outlier Detection - {col} - Isolation Forest')
    plt.xlabel(col)
    plt.legend()

    plt.tight_layout()
    plt.show()

results = {'Column': [], 'Grubbs_Percentage': [], 'IsolationForest_Percentage': []}

# Extract all numeric columns for outlier detection
numeric_columns = df.select_dtypes(include=[np.number]).columns

# Iterate over each numeric column
for column in cols:
    # Extract the relevant column for outlier detection
    data_for_detection = df[[column]]

    # Standardize the data using Z-score
    data_for_detection['Z_Score'] = zscore(data_for_detection[column])

    # Apply Grubbs' test for outlier detection


    outliers_grubbs = grubbs_test(data_for_detection[column])

    # Apply Isolation Forest for outlier detection
    isolation_forest = IsolationForest(contamination=0.05)  # Adjust the contamination parameter as needed
    data_for_detection['IsolationForest'] = isolation_forest.fit_predict(data_for_detection[[column]])

    # Identify the outliers from the Isolation Forest
    outliers_isolation_forest = data_for_detection[data_for_detection['IsolationForest'] == -1]

    # Count the number of outliers and calculate the percentage
    num_outliers_grubbs = outliers_grubbs.sum()
    num_outliers_isolation_forest = outliers_isolation_forest.shape[0]

    total_rows = len(data_for_detection)
    percentage_grubbs = (num_outliers_grubbs / total_rows) * 100
    percentage_isolation_forest = (num_outliers_isolation_forest / total_rows) * 100

    # Save the results in the dictionary
    results['Column'].append(column)
    results['Grubbs_Percentage'].append(percentage_grubbs)
    results['IsolationForest_Percentage'].append(percentage_isolation_forest)

    # Print the results
    #print(f"Column: {column}")
    #print(f"Grubbs' Test - Number of outliers: {num_outliers_grubbs}, Percentage: {percentage_grubbs:.2f}%")
    #print(f"Isolation Forest - Number of outliers: {num_outliers_isolation_forest}, Percentage: {percentage_isolation_forest:.2f}%")
    #print("=" * 50)

# Plot the results
plt.figure(figsize=(10, 6))
plt.bar(results['Column'], results['Grubbs_Percentage'], label="Grubbs' Test")
plt.bar(results['Column'], results['IsolationForest_Percentage'], label="Isolation Forest", alpha=0.5)
plt.xlabel('Columns')
plt.ylabel('Percentage of Outliers')
plt.title('Percentage of Outliers in Each Test for Each Column')
plt.legend()
plt.show()

cols_to_drop = [col for col, info in outlier_data.items() if info['percentage'] > 15]

# Drop columns with more than 15% outliers
df.drop(cols_to_drop, axis=1, inplace=True)

print("Columns Dropped:")
print(cols_to_drop)
print("\nDataFrame After Dropping Columns:")
print(df)

