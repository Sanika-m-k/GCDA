# -*- coding: utf-8 -*-
"""Copy of Risk wise feature_selection cluster0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XKw0ahIscnGKs2JF62nr1Tbg9OPp9uZh
"""

import numpy as np
import pandas as pd



from google.colab import drive
drive.mount('/content/drive')



import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv('/content/drive/MyDrive/census/df0.csv')

# Print the DataFrame
print(df)

for column in df.columns:
  print(column)

#drop the NaN and Outlier columns
df = df.drop(['Cluster_Labels','ACS_MEDIAN_HH_INC_AIAN',
 'ACS_MEDIAN_HH_INC_ASIAN',
 'ACS_MEDIAN_HH_INC_BLACK',
 'ACS_MEDIAN_HH_INC_MULTI',
 'ACS_MEDIAN_HH_INC_NHPI',
 'ACS_MEDIAN_HH_INC_OTHER',
 'ACS_MEDIAN_HH_INC_BLACK',
 'ACS_PCT_AIAN_FEMALE',
 'ACS_PCT_AIAN_MALE',
'ACS_PCT_ASIAN_FEMALE',
'ACS_PCT_ASIAN_MALE',
'ACS_PCT_HH_DIAL_INTERNET_ONLY',
  'ACS_PCT_PRIVATE_OTHER',
  'ACS_PCT_PRIVATE_OTHER_BELOW64',
  'ACS_PCT_PUB_COMMT_15MIN',
  'ACS_PCT_VET_UNEMPL_18_64'],axis=1)

for column in df.columns:
  print(column)

df.info()

print(df.info())

df.describe()



df.corr()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assume df is your DataFrame with your data

# Calculate correlation matrix
corr_matrix = df.corr()

# Plot correlation heatmap
plt.figure(figsize=(50,50))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Assume df is your DataFrame with your data

# Calculate correlation matrix
corr_matrix = df.corr()

# Set threshold for strong correlation
threshold = 0.7

# Select strongly correlated features
strong_correlations = (corr_matrix.abs() > threshold) & (corr_matrix.abs() < 1.0)

# Plot correlation heatmap
plt.figure(figsize=(60, 60))
sns.heatmap(corr_matrix[strong_correlations], annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Strongly Correlated Features")
plt.show()

# Plot scatter plots for strongly correlated features



threshold = 0.7  # Adjust as needed

# Extract column pairs with high correlation
high_correlation_pairs = []

# Iterate through the correlation matrix
for i in range(len(corr_matrix.columns)):
    for j in range(i+1, len(corr_matrix.columns)):
        if (corr_matrix.iloc[i, j]) > threshold:
            pair = (corr_matrix.columns[i], corr_matrix.columns[j], corr_matrix.iloc[i, j])
            high_correlation_pairs.append(pair)

# Print the high correlation pairs
for pair in high_correlation_pairs:
    print(pair)

for feature1 in strong_correlations.columns:
    for feature2 in strong_correlations.index:
        if strong_correlations.loc[feature2, feature1]:
            plt.figure(figsize=(6, 4))
            sns.scatterplot(data=df, x=feature1, y=feature2)
            plt.title(f"Scatter Plot: {feature1} vs {feature2}")
            plt.xlabel(feature1)
            plt.ylabel(feature2)
            plt.show()



"""#   Housing risk"""

data = df.copy()

data

"""## Dividing the data into two dataframes"""

out = pd.read_csv('/content/drive/MyDrive/census/HealthOutcomesBYCENSUSTRACT.csv')

# Merge the two DataFrames on the common column
merged_data = pd.merge(df, out, left_on='TRACTFIPS', right_on='LocationID', how='inner')

# Drop the redundant common column (LocationID)
merged_data.drop('LocationID', axis=1, inplace=True)


# Assuming your DataFrame is called 'df'
# You can replace 'df' with the actual name of your DataFrame

# Drop totally duplicated rows
merged_data.drop_duplicates(inplace=True)

# Print the DataFrame after removing duplicates
print(df)

# Print the merged DataFrame
print(merged_data)

data = merged_data.copy()

pca_ho=pd.read_csv('/content/drive/MyDrive/census/df_new_pca.csv')

pca_ho

merged_data = pd.merge(df, pca_ho , left_on='TRACTFIPS', right_on='LocationID', how='inner')

# Drop the redundant common column (LocationID)
merged_data.drop(['LocationID','Unnamed: 0'], axis=1, inplace=True)


# Assuming your DataFrame is called 'df'
# You can replace 'df' with the actual name of your DataFrame

# Drop totally duplicated rows
merged_data.drop_duplicates(inplace=True)

# Print the DataFrame after removing duplicates
print(df)

# Print the merged DataFrame
print(merged_data)

df_plotting=merged_data.copy()

df_plotting

data

"""## Mental Health"""

import pandas as pd

# Assuming df is your DataFrame

# List of columns with NaN values
columns_with_nan = ["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]  # Replace with your column names

# Replace NaN values with the respective medians
for col in columns_with_nan:
    median_value = data[col].median()
    data[col].fillna(median_value, inplace=True)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[
'ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_OWNER_HU_COST_50PCT', 'ACS_PCT_PUB_COMMT_60MINUP',
    'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_CHILDREN_GRANDPARENT',
    'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP',
    'ACS_PCT_PRIVATE_SELF', 'ACS_PCT_PRIVATE_SELF_BELOW64', 'ACS_PCT_PVT_EMPL_DRCT',
    'ACS_PCT_PVT_EMPL_DRCT_BELOW64', 'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64',
    'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64']]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

Mental_Health_Features=[
'ACS_PCT_OWNER_HU_COST_30PCT', 'ACS_PCT_OWNER_HU_COST_50PCT', 'ACS_PCT_PUB_COMMT_60MINUP',
    'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_CHILDREN_GRANDPARENT',
    'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP',
    'ACS_PCT_PRIVATE_SELF', 'ACS_PCT_PRIVATE_SELF_BELOW64', 'ACS_PCT_PVT_EMPL_DRCT',
    'ACS_PCT_PVT_EMPL_DRCT_BELOW64', 'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64',
    'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64']



feature_importance_df

"""### Model Implementation"""

# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + Mental_Health_Features
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)

pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
Multiplying_Factor

feature_importance_df['MF']=Multiplying_Factor
feature_importance_df

feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Mental_Health_RiskScore'] = weighted_avgs

df_plotting

import matplotlib.pyplot as plt

# Plot scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Mental_Health_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Mental_Health_RiskScore vs PCA_Variable')
plt.xlabel('Mental_Health_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Define the number of rows and columns for subplot arrangement
num_features = len(Mental_Health_Features)
num_cols = 3  # Number of columns per row in subplot arrangement
num_rows = (num_features + num_cols - 1) // num_cols  # Calculate the number of rows needed

# Create a new figure for the subplots
fig, axes = plt.subplots(num_rows, num_cols, figsize=(15, 5*num_rows))

# Iterate over each feature in Mental_Health_Features
for idx, feature in enumerate(Mental_Health_Features):
    # Calculate the subplot index for the current feature
    row_idx = idx // num_cols
    col_idx = idx % num_cols

    # Get the corresponding axis for the subplot
    ax = axes[row_idx, col_idx] if num_rows > 1 else axes[col_idx]

    # Plot the current feature against 'PCA_Variable'
    ax.scatter(df_plotting[feature],df_plotting['PCA_Variable'], alpha=0.5)
    ax.set_title(f'{feature} vs PCA_Variable')
    ax.set_xlabel('PCA_Variable')
    ax.set_ylabel(feature)
    ax.grid(True)

# Adjust layout to prevent overlapping
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Define the number of rows and columns for subplot arrangement
num_features = len(Mental_Health_Features)
num_cols = 3  # Number of columns per row in subplot arrangement
num_rows = (num_features + num_cols - 1) // num_cols  # Calculate the number of rows needed

# Create a new figure for the subplots
fig, axes = plt.subplots(num_rows, num_cols, figsize=(15, 5*num_rows))

# Iterate over each feature in Mental_Health_Features
for idx, feature in enumerate(Mental_Health_Features):
    # Calculate the subplot index for the current feature
    row_idx = idx // num_cols
    col_idx = idx % num_cols

    # Get the corresponding axis for the subplot
    ax = axes[row_idx, col_idx] if num_rows > 1 else axes[col_idx]

    # Plot the current feature against 'PCA_Variable'
    ax.scatter(df_plotting[feature], df_plotting['PCA_Variable'], alpha=0.5)
    ax.set_title(f'{feature} vs PCA_Variable')
    ax.set_xlabel(feature)
    ax.set_ylabel('PCA_Variable')
    ax.grid(True)

# Adjust layout to prevent overlapping
plt.tight_layout()
plt.show()

"""## Discrimination"""



# Assuming df is your DataFrame
selected_columns = [
    'ACS_PCT_FOREIGN_BORN', 'ACS_PCT_WHITE', 'ACS_PCT_HISP', 'ACS_PCT_COMB',
    'ACS_PCT_OTHER_LANG', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

# Check the presence of selected columns in the DataFrame
missing_columns = [col for col in selected_columns if col not in data.columns]

if missing_columns:
    print("The following columns are missing from the DataFrame:", missing_columns)
else:
    print("All selected columns are present in the DataFrame.")

DiscriminationRiskFeatures=[ 'ACS_PCT_FOREIGN_BORN', 'ACS_PCT_WHITE',
     'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[ 'ACS_PCT_FOREIGN_BORN', 'ACS_PCT_WHITE',
     'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]]




X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

"""### Model Implementation"""



feature_importance_df

# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + DiscriminationRiskFeatures
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)

pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df



feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Discrimination_RiskScore'] = weighted_avgs

df_plotting

plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Discrimination_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Mental_Health_RiskScore vs PCA_Variable')
plt.xlabel('Discrimination_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()

"""## Housing Risk"""



Housing_Risk_Features=[ 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_PRIVATE_MDCR_35_64',
    'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT',
    'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[ 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_PRIVATE_MDCR_35_64',
    'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT',
    'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65',
    'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

"""### Model Implementation"""

feature_importance_df

# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + Housing_Risk_Features
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df

feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Housing_RiskScore'] = weighted_avgs

df_plotting

plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Housing_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Mental_Health_RiskScore vs PCA_Variable')
plt.xlabel('Housing_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()

"""## Self-Care risk"""

SelfCareRisk_Features=[ 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64',
    'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY',
    'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_OTHER_INS',
    'ACS_PCT_PRIVATE_EMPL', 'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR',
    'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_PUBLIC_OTHER',
    'ACS_PCT_PUBLIC_OTHER_BELOW64', 'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64',
    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_TOT_GRANDCHILDREN_GP'
]

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[ 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE', 'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64',
    'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY',
    'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_OTHER_INS',
    'ACS_PCT_PRIVATE_EMPL', 'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR',
    'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_PUBLIC_OTHER',
    'ACS_PCT_PUBLIC_OTHER_BELOW64', 'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64',
    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_TOT_GRANDCHILDREN_GP'
]]




X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

"""### Model Implementation"""

feature_importance_df

# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + SelfCareRisk_Features
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df

feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['SelfCare_RiskScore'] = weighted_avgs

df_plotting

plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['SelfCare_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Mental_Health_RiskScore vs PCA_Variable')
plt.xlabel('SelfCare_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()

"""## Family Conflicts risk"""



FamilyConflictRisk_Features=[  'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64',  'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64',
   'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED',
    'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM',
    'ACS_TOT_GRANDCHILDREN_GP',  'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]

# Assuming df is your DataFrame
selected_columns = [  'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64',
    'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_ANY_BELOW64', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64',
    'ACS_PCT_PUBLIC_ONLY', 'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED',
    'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM',
    'ACS_PCT_HH_ABOVE65', 'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_PCT_HH_KID_1PRNT',
    'ACS_TOT_GRANDCHILDREN_GP', 'ACS_DIVORCED', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'

]

# Check the presence of selected columns in the DataFrame
missing_columns = [col for col in selected_columns if col not in data.columns]

if missing_columns:
    print("The following columns are missing from the DataFrame:", missing_columns)
else:
    print("All selected columns are present in the DataFrame.")

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[  'ACS_PCT_RENTER_HU_ABOVE65', 'ACS_PCT_MEDICAID_ANY', 'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_EMPL_BELOW64', 'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64',
   'ACS_PCT_PVT_EMPL_DRCT', 'ACS_PCT_PVT_EMPL_DRCT_BELOW64',
    'ACS_PCT_TRICARE_VA', 'ACS_PCT_TRICARE_VA_BELOW64', 'ACS_PCT_UNINSURED',
    'ACS_PCT_UNINSURED_BELOW64', 'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM',
    'ACS_TOT_GRANDCHILDREN_GP',  'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64'
]]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

"""### Model Implementation"""

feature_importance_df

# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + SelfCareRisk_Features
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df

feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['FamilyConflicts_RiskScore'] = weighted_avgs

df_plotting

plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['FamilyConflicts_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of FamilyConflict_RiskScore vs PCA_Variable')
plt.xlabel('FamilyConflict_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()

"""## Transportation risk"""

TransportationRisk_Features=[ 'ACS_PCT_COMMT_15MIN', 'ACS_PCT_COMMT_29MIN', 'ACS_PCT_COMMT_59MIN', 'ACS_PCT_COMMT_60MINUP',
    'ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_29MIN',
    'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_RENTER_HU_COST_30PCT',
    'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR', 'ACS_PCT_MEDICAID_ANY',
    'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64',
    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65',
    'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64']

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

y = data[["Obesity among adults aged >=18 years", "Current asthma among adults aged >=18 years", "Current smoking among adults aged >=18 years", "Mammography use among women aged 50-74 years", "Fair or poor self-rated health status among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years", "Cervical cancer screening among adult women aged 21-65 years", "Physical health not good for >=14 days among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Hearing disability among adults aged >=18 years", "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", "Sleeping less than 7 hours among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", "Cognitive disability among adults ages >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Coronary heart disease among adults aged >=18 years", "Depression among adults aged >=18 years", "High blood pressure among adults aged >=18 years", "Arthritis among adults aged >=18 years", "All teeth lost among adults aged >=65 years", "Cholesterol screening among adults aged >=18 years", "Chronic kidney disease among adults aged >=18 years", "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", "Mobility disability among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", "Independent living disability among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Binge drinking among adults aged >=18 years", "Stroke among adults aged >=18 years", "Vision disability among adults aged >=18 years", "Self-care disability among adults aged >=18 years", "Cancer (excluding skin cancer) among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years", "Mental health not good for >=14 days among adults aged >=18 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", "Current lack of health insurance among adults aged 18-64 years", "Any disability among adults aged >=18 years"
]]


X = data[[ 'ACS_PCT_COMMT_15MIN', 'ACS_PCT_COMMT_29MIN', 'ACS_PCT_COMMT_59MIN', 'ACS_PCT_COMMT_60MINUP',
    'ACS_PCT_HU_NO_VEH', 'ACS_PCT_PUBL_TRANSIT', 'ACS_PCT_PUB_COMMT_29MIN',
    'ACS_PCT_PUB_COMMT_59MIN', 'ACS_PCT_PUB_COMMT_60MINUP', 'ACS_PCT_RENTER_HU_COST_30PCT',
    'ACS_PCT_RENTER_HU_COST_50PCT', 'ACS_PCT_WALK_2WORK', 'ACS_PCT_WORK_NO_CAR', 'ACS_PCT_MEDICAID_ANY',
    'ACS_PCT_MEDICAID_ANY_BELOW64', 'ACS_PCT_MEDICARE_ONLY', 'ACS_PCT_PRIVATE_ANY', 'ACS_PCT_PRIVATE_EMPL',
    'ACS_PCT_PRIVATE_MDCR', 'ACS_PCT_PRIVATE_MDCR_35_64', 'ACS_PCT_UNINSURED', 'ACS_PCT_UNINSURED_BELOW64',
    'ACS_PCT_CHILDREN_GRANDPARENT', 'ACS_PCT_CHILD_1FAM', 'ACS_PCT_HH_1PERS', 'ACS_PCT_HH_ABOVE65',
    'ACS_PCT_HH_ALONE_ABOVE65', 'ACS_TOT_GRANDCHILDREN_GP', 'ACS_PCT_CHILD_DISAB', 'ACS_PCT_DISABLE',
    'ACS_PCT_NONVET_DISABLE_18_64', 'ACS_PCT_VET_DISABLE_18_64' ]]


for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

"""### Model Implementation"""

feature_importance_df



# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + TransportationRisk_Features
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df

feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Transportation_RiskScore'] = weighted_avgs

df_plotting

plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Transportation_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Transportation_RiskScore vs PCA_Variable')
plt.xlabel('Transportation_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()

"""## Financial Risk"""

FinancialRisk_Features=['ACS_AVG_HH_SIZE',
 'ACS_MEDIAN_HH_INC',

 'ACS_MEDIAN_INC_F',
 'ACS_MEDIAN_INC_M',
 'ACS_MEDIAN_NONVET_INC',
 'ACS_PER_CAPITA_INC',
 'ACS_PCT_HH_1PERS',
 'ACS_PCT_HH_ABOVE65',
 'ACS_PCT_HH_ALONE_ABOVE65',
 'ACS_PCT_HH_FOOD_STMP',
 'ACS_PCT_HH_INC_10000',
 'ACS_PCT_HH_INC_100000',
 'ACS_PCT_HH_INC_99999',
 'ACS_PCT_HH_PC',
 'ACS_PCT_HH_PUB_ASSIST',
 'ACS_PCT_HH_TABLET',
 'ACS_PCT_HU_NO_VEH',
 'ACS_PCT_RENTER_HU_COST_30PCT',
 'ACS_PCT_RENTER_HU_COST_50PCT',
 'ACS_PCT_VET_COLLEGE',
 'ACS_PCT_VET_HS',
 'ACS_TOT_HH',
 'ACS_TOT_HU',
 'ACS_TOT_POP_ABOVE15',
 'ACS_TOT_POP_ABOVE16',
 'ACS_TOT_POP_ABOVE25',
 'ACS_TOT_POP_ABOVE5',
 'ACS_TOT_POP_US_ABOVE1',
 'ACS_TOT_POP_WT',
 'ACS_TOT_WORKER_NWFH',]

X = data[[
 'ACS_AVG_HH_SIZE',
 'ACS_MEDIAN_HH_INC',

 'ACS_MEDIAN_INC_F',
 'ACS_MEDIAN_INC_M',
 'ACS_MEDIAN_NONVET_INC',
 'ACS_PER_CAPITA_INC',
 'ACS_PCT_HH_1PERS',
 'ACS_PCT_HH_ABOVE65',
 'ACS_PCT_HH_ALONE_ABOVE65',
 'ACS_PCT_HH_FOOD_STMP',
 'ACS_PCT_HH_INC_10000',
 'ACS_PCT_HH_INC_100000',
 'ACS_PCT_HH_INC_99999',
 'ACS_PCT_HH_PC',
 'ACS_PCT_HH_PUB_ASSIST',
 'ACS_PCT_HH_TABLET',
 'ACS_PCT_HU_NO_VEH',
 'ACS_PCT_RENTER_HU_COST_30PCT',
 'ACS_PCT_RENTER_HU_COST_50PCT',
 'ACS_PCT_VET_COLLEGE',
 'ACS_PCT_VET_HS',
 'ACS_TOT_HH',
 'ACS_TOT_HU',
 'ACS_TOT_POP_ABOVE15',
 'ACS_TOT_POP_ABOVE16',
 'ACS_TOT_POP_ABOVE25',
 'ACS_TOT_POP_ABOVE5',
 'ACS_TOT_POP_US_ABOVE1',
 'ACS_TOT_POP_WT',
 'ACS_TOT_WORKER_NWFH',]]
y = data[['Obesity among adults aged >=18 years',
 'Current asthma among adults aged >=18 years',
 'Current smoking among adults aged >=18 years',
 'Mammography use among women aged 50-74 years',
 'Fair or poor self-rated health status among adults aged >=18 years',
 'Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years',
 'Cervical cancer screening among adult women aged 21-65 years',
 'Physical health not good for >=14 days among adults aged >=18 years',
 'Visits to dentist or dental clinic among adults aged >=18 years',
 'Hearing disability among adults aged >=18 years',
 'Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years',

 'No leisure-time physical activity among adults aged >=18 years',
 'Cognitive disability among adults ages >=18 years',
 'High cholesterol among adults aged >=18 years who have been screened in the past 5 years',
 'Coronary heart disease among adults aged >=18 years',
 'Depression among adults aged >=18 years',
 'High blood pressure among adults aged >=18 years',
 'Arthritis among adults aged >=18 years',
 'All teeth lost among adults aged >=65 years',
 'Cholesterol screening among adults aged >=18 years',
 'Chronic kidney disease among adults aged >=18 years',
 'Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening',
 'Mobility disability among adults aged >=18 years',
 'Diagnosed diabetes among adults aged >=18 years',
 'Independent living disability among adults aged >=18 years',
 'Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure',
 'Binge drinking among adults aged >=18 years',
 'Stroke among adults aged >=18 years',
 'Vision disability among adults aged >=18 years',
 'Self-care disability among adults aged >=18 years',
 'Cancer (excluding skin cancer) among adults aged >=18 years',
 'Visits to doctor for routine checkup within the past year among adults aged >=18 years',
 'Mental health not good for >=14 days among adults aged >=18 years',
 'Chronic obstructive pulmonary disease among adults aged >=18 years',
 'Current lack of health insurance among adults aged 18-64 years',
 'Any disability among adults aged >=18 years']]

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer

# models
from sklearn.tree import DecisionTreeRegressor, ExtraTreeRegressor
from xgboost import XGBRegressor

for col in y.columns:
    if y[col].isnull().any():
        y[col] = y[col].fillna(y[col].mean())


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

"""### Model Implementation"""

feature_importance_df

# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + FinancialRisk_Features
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df

feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Financial_RiskScore'] = weighted_avgs

df_plotting

plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Financial_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Financial_RiskScore vs PCA_Variable')
plt.xlabel('Financial_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()

"""## Educational Risk"""

EducationRisk_Feature = [
    'ACS_PCT_HH_BROADBAND',


'ACS_PCT_HH_CELLULAR',
'ACS_PCT_HH_CELLULAR_ONLY',

'ACS_PCT_HH_INTERNET',

'ACS_PCT_HH_NO_COMP_DEV',
'ACS_PCT_HH_NO_INTERNET',


'ACS_PCT_HH_PC',


'ACS_PCT_HH_SMARTPHONE',
'ACS_PCT_HH_SMARTPHONE_ONLY',
'ACS_PCT_HH_TABLET',

'ACS_PCT_RENTER_HU_COST_50PCT',
'ACS_PCT_WALK_2WORK',
'ACS_PCT_WORK_NO_CAR'
]

# Filter the columns from the original dataframe
#educational_df = new_df[ educational_columns+output_columns]



# Display the transportation dataframe
#print(educational_df)

X = data[[
 'ACS_PCT_HH_BROADBAND',


'ACS_PCT_HH_CELLULAR',
'ACS_PCT_HH_CELLULAR_ONLY',

'ACS_PCT_HH_INTERNET',

'ACS_PCT_HH_NO_COMP_DEV',
'ACS_PCT_HH_NO_INTERNET',


'ACS_PCT_HH_PC',


'ACS_PCT_HH_SMARTPHONE',
'ACS_PCT_HH_SMARTPHONE_ONLY',
'ACS_PCT_HH_TABLET',

'ACS_PCT_RENTER_HU_COST_50PCT',
'ACS_PCT_WALK_2WORK',
'ACS_PCT_WORK_NO_CAR']]
y = data[['Obesity among adults aged >=18 years',
 'Current asthma among adults aged >=18 years',
 'Current smoking among adults aged >=18 years',
 'Mammography use among women aged 50-74 years',
 'Fair or poor self-rated health status among adults aged >=18 years',
 'Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years',
 'Cervical cancer screening among adult women aged 21-65 years',
 'Physical health not good for >=14 days among adults aged >=18 years',
 'Visits to dentist or dental clinic among adults aged >=18 years',
 'Hearing disability among adults aged >=18 years',
 'Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years',

 'No leisure-time physical activity among adults aged >=18 years',
 'Cognitive disability among adults ages >=18 years',
 'High cholesterol among adults aged >=18 years who have been screened in the past 5 years',
 'Coronary heart disease among adults aged >=18 years',
 'Depression among adults aged >=18 years',
 'High blood pressure among adults aged >=18 years',
 'Arthritis among adults aged >=18 years',
 'All teeth lost among adults aged >=65 years',
 'Cholesterol screening among adults aged >=18 years',
 'Chronic kidney disease among adults aged >=18 years',
 'Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening',
 'Mobility disability among adults aged >=18 years',
 'Diagnosed diabetes among adults aged >=18 years',
 'Independent living disability among adults aged >=18 years',
 'Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure',
 'Binge drinking among adults aged >=18 years',
 'Stroke among adults aged >=18 years',
 'Vision disability among adults aged >=18 years',
 'Self-care disability among adults aged >=18 years',
 'Cancer (excluding skin cancer) among adults aged >=18 years',
 'Visits to doctor for routine checkup within the past year among adults aged >=18 years',
 'Mental health not good for >=14 days among adults aged >=18 years',
 'Chronic obstructive pulmonary disease among adults aged >=18 years',
 'Current lack of health insurance among adults aged 18-64 years',
 'Any disability among adults aged >=18 years']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()



"""### Model Implementation"""

feature_importance_df

# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + EducationRisk_Feature
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1

Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df

feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df

weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Educational_RiskScore'] = weighted_avgs

df_plotting

plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Educational_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Educational_RiskScore vs PCA_Variable')
plt.xlabel('Educational_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()



"""## Legal Risk"""



LegalRisk_Feature = [
    "ACS_PCT_FOREIGN_BORN",
"ACS_PCT_ENGL_NOT_ALL",
"ACS_PCT_ENGL_NOT_WELL",
"ACS_PCT_HEALTH_INC_ABOVE400",
"ACS_PCT_HEALTH_INC_BELOW137",
"ACS_PCT_LT_HS",
"ACS_PCT_POSTHS_ED",
"ACS_PCT_CHILD_DISAB",
"ACS_PCT_DISABLE",
"ACS_PCT_NONVET_DISABLE_18_64",
"ACS_PCT_UNEMPLOY",
"ACS_MEDIAN_HH_INC",
"ACS_MEDIAN_NONVET_INC",
"ACS_PCT_MEDICAID_ANY",
"ACS_PCT_MEDICAID_ANY_BELOW64",
"ACS_PCT_PRIVATE_ANY",
"ACS_PCT_PRIVATE_ANY_BELOW64",
"ACS_PCT_PRIVATE_SELF",
"ACS_PCT_PRIVATE_SELF_BELOW64",
"ACS_PCT_PUBLIC_OTHER",
"ACS_PCT_SELF_MDCR_ABOVE35",
"ACS_PCT_CHILDREN_GRANDPARENT",
"ACS_PCT_CHILD_1FAM",
"ACS_PCT_HH_ABOVE65",
"ACS_PCT_HH_ALONE_ABOVE65"
]

# Filter the columns from the original dataframe
#educational_df = new_df[ educational_columns+output_columns]



# Display the transportation dataframe
#print(educational_df)



X = data[[ "ACS_PCT_FOREIGN_BORN",
"ACS_PCT_ENGL_NOT_ALL",
"ACS_PCT_ENGL_NOT_WELL",
"ACS_PCT_HEALTH_INC_ABOVE400",
"ACS_PCT_HEALTH_INC_BELOW137",
"ACS_PCT_LT_HS",
"ACS_PCT_POSTHS_ED",
"ACS_PCT_CHILD_DISAB",
"ACS_PCT_DISABLE",
"ACS_PCT_NONVET_DISABLE_18_64",
"ACS_PCT_UNEMPLOY",
"ACS_MEDIAN_HH_INC",
"ACS_MEDIAN_NONVET_INC",
"ACS_PCT_MEDICAID_ANY",
"ACS_PCT_MEDICAID_ANY_BELOW64",
"ACS_PCT_PRIVATE_ANY",
"ACS_PCT_PRIVATE_ANY_BELOW64",
"ACS_PCT_PRIVATE_SELF",
"ACS_PCT_PRIVATE_SELF_BELOW64",
"ACS_PCT_PUBLIC_OTHER",
"ACS_PCT_SELF_MDCR_ABOVE35",
"ACS_PCT_CHILDREN_GRANDPARENT",
"ACS_PCT_CHILD_1FAM",
"ACS_PCT_HH_ABOVE65",
"ACS_PCT_HH_ALONE_ABOVE65"
 ]]
y = data[['Obesity among adults aged >=18 years',
 'Current asthma among adults aged >=18 years',
 'Current smoking among adults aged >=18 years',
 'Mammography use among women aged 50-74 years',
 'Fair or poor self-rated health status among adults aged >=18 years',
 'Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years',
 'Cervical cancer screening among adult women aged 21-65 years',
 'Physical health not good for >=14 days among adults aged >=18 years',
 'Visits to dentist or dental clinic among adults aged >=18 years',
 'Hearing disability among adults aged >=18 years',
 'Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years',

 'No leisure-time physical activity among adults aged >=18 years',
 'Cognitive disability among adults ages >=18 years',
 'High cholesterol among adults aged >=18 years who have been screened in the past 5 years',
 'Coronary heart disease among adults aged >=18 years',
 'Depression among adults aged >=18 years',
 'High blood pressure among adults aged >=18 years',
 'Arthritis among adults aged >=18 years',
 'All teeth lost among adults aged >=65 years',
 'Cholesterol screening among adults aged >=18 years',
 'Chronic kidney disease among adults aged >=18 years',
 'Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening',
 'Mobility disability among adults aged >=18 years',
 'Diagnosed diabetes among adults aged >=18 years',
 'Independent living disability among adults aged >=18 years',
 'Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure',
 'Binge drinking among adults aged >=18 years',
 'Stroke among adults aged >=18 years',
 'Vision disability among adults aged >=18 years',
 'Self-care disability among adults aged >=18 years',
 'Cancer (excluding skin cancer) among adults aged >=18 years',
 'Visits to doctor for routine checkup within the past year among adults aged >=18 years',
 'Mental health not good for >=14 days among adults aged >=18 years',
 'Chronic obstructive pulmonary disease among adults aged >=18 years',
 'Current lack of health insurance among adults aged 18-64 years',
 'Any disability among adults aged >=18 years']]



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()



"""## Model Implementation"""

feature_importance_df



# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + LegalRisk_Feature
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1



Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df



feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df



weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Legal_RiskScore'] = weighted_avgs

df_plotting



plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Legal_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Legal_RiskScore vs PCA_Variable')
plt.xlabel('Legal_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()



"""## Environmental Risk"""



EnvironmentalRisk_Feature = [
     "ACS_PCT_HU_NO_VEH",
"ACS_PCT_PUBL_TRANSIT",

"ACS_PCT_PUB_COMMT_29MIN",
"ACS_PCT_PUB_COMMT_59MIN",
"ACS_PCT_PUB_COMMT_60MINUP",
"ACS_PCT_WALK_2WORK",
"ACS_PCT_WORK_NO_CAR",
"ACS_PCT_DISABLE"

]

# Filter the columns from the original dataframe
#educational_df = new_df[ educational_columns+output_columns]



# Display the transportation dataframe
#print(educational_df)



X = data[[ "ACS_PCT_HU_NO_VEH",
"ACS_PCT_PUBL_TRANSIT",

"ACS_PCT_PUB_COMMT_29MIN",
"ACS_PCT_PUB_COMMT_59MIN",
"ACS_PCT_PUB_COMMT_60MINUP",
"ACS_PCT_WALK_2WORK",
"ACS_PCT_WORK_NO_CAR",
"ACS_PCT_DISABLE"
 ]]
y = data[['Obesity among adults aged >=18 years',
 'Current asthma among adults aged >=18 years',
 'Current smoking among adults aged >=18 years',
 'Mammography use among women aged 50-74 years',
 'Fair or poor self-rated health status among adults aged >=18 years',
 'Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years',
 'Cervical cancer screening among adult women aged 21-65 years',
 'Physical health not good for >=14 days among adults aged >=18 years',
 'Visits to dentist or dental clinic among adults aged >=18 years',
 'Hearing disability among adults aged >=18 years',
 'Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years',

 'No leisure-time physical activity among adults aged >=18 years',
 'Cognitive disability among adults ages >=18 years',
 'High cholesterol among adults aged >=18 years who have been screened in the past 5 years',
 'Coronary heart disease among adults aged >=18 years',
 'Depression among adults aged >=18 years',
 'High blood pressure among adults aged >=18 years',
 'Arthritis among adults aged >=18 years',
 'All teeth lost among adults aged >=65 years',
 'Cholesterol screening among adults aged >=18 years',
 'Chronic kidney disease among adults aged >=18 years',
 'Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening',
 'Mobility disability among adults aged >=18 years',
 'Diagnosed diabetes among adults aged >=18 years',
 'Independent living disability among adults aged >=18 years',
 'Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure',
 'Binge drinking among adults aged >=18 years',
 'Stroke among adults aged >=18 years',
 'Vision disability among adults aged >=18 years',
 'Self-care disability among adults aged >=18 years',
 'Cancer (excluding skin cancer) among adults aged >=18 years',
 'Visits to doctor for routine checkup within the past year among adults aged >=18 years',
 'Mental health not good for >=14 days among adults aged >=18 years',
 'Chronic obstructive pulmonary disease among adults aged >=18 years',
 'Current lack of health insurance among adults aged 18-64 years',
 'Any disability among adults aged >=18 years']]



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()



"""## Model Implementaion"""



feature_importance_df



# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + EnvironmentalRisk_Feature
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1



Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df



feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df



weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Environmental_RiskScore'] = weighted_avgs



df_plotting



plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Environmental_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Environmental_RiskScore vs PCA_Variable')
plt.xlabel('Environmental_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()



"""## Technical Risk"""



TechnicalRisk_Feature = [
      "ACS_PCT_HH_BROADBAND",
"ACS_PCT_HH_BROADBAND_ANY",
"ACS_PCT_HH_BROADBAND_ONLY",
"ACS_PCT_HH_CELLULAR",
"ACS_PCT_HH_CELLULAR_ONLY",
"ACS_PCT_HH_INTERNET",
"ACS_PCT_HH_INTERNET_NO_SUBS",
"ACS_PCT_HH_NO_COMP_DEV",
"ACS_PCT_HH_NO_INTERNET",
"ACS_PCT_HH_OTHER_COMP",
"ACS_PCT_HH_OTHER_COMP_ONLY",
"ACS_PCT_HH_PC",
"ACS_PCT_HH_PC_ONLY",
"ACS_PCT_HH_SAT_INTERNET",
"ACS_PCT_HH_SMARTPHONE",
"ACS_PCT_HH_SMARTPHONE_ONLY",
"ACS_PCT_HH_TABLET",
"ACS_PCT_HH_TABLET_ONLY",
"ACS_PCT_MEDICAID_ANY",
"ACS_PCT_PRIVATE_ANY",
"ACS_PCT_PRIVATE_EMPL",
"ACS_PCT_CHILDREN_GRANDPARENT",
"ACS_PCT_CHILD_1FAM",
"ACS_PCT_HH_1PERS",
"ACS_PCT_HH_ABOVE65",
"ACS_PCT_HH_ALONE_ABOVE65",
"ACS_TOT_GRANDCHILDREN_GP",
"ACS_PCT_DISABLE",
"ACS_PCT_CHILD_DISAB",
"ACS_PCT_NONVET_DISABLE_18_64",
"ACS_PCT_VET_DISABLE_18_64"

]

# Filter the columns from the original dataframe
#educational_df = new_df[ educational_columns+output_columns]



# Display the transportation dataframe
#print(educational_df)



X = data[[  "ACS_PCT_HH_BROADBAND",
"ACS_PCT_HH_BROADBAND_ANY",
"ACS_PCT_HH_BROADBAND_ONLY",
"ACS_PCT_HH_CELLULAR",
"ACS_PCT_HH_CELLULAR_ONLY",

"ACS_PCT_HH_INTERNET",
"ACS_PCT_HH_INTERNET_NO_SUBS",
"ACS_PCT_HH_NO_COMP_DEV",
"ACS_PCT_HH_NO_INTERNET",
"ACS_PCT_HH_OTHER_COMP",
"ACS_PCT_HH_OTHER_COMP_ONLY",
"ACS_PCT_HH_PC",
"ACS_PCT_HH_PC_ONLY",
"ACS_PCT_HH_SAT_INTERNET",
"ACS_PCT_HH_SMARTPHONE",
"ACS_PCT_HH_SMARTPHONE_ONLY",
"ACS_PCT_HH_TABLET",
"ACS_PCT_HH_TABLET_ONLY",
"ACS_PCT_MEDICAID_ANY",
"ACS_PCT_PRIVATE_ANY",
"ACS_PCT_PRIVATE_EMPL",
"ACS_PCT_CHILDREN_GRANDPARENT",
"ACS_PCT_CHILD_1FAM",
"ACS_PCT_HH_1PERS",
"ACS_PCT_HH_ABOVE65",
"ACS_PCT_HH_ALONE_ABOVE65",
"ACS_TOT_GRANDCHILDREN_GP",
"ACS_PCT_DISABLE",
"ACS_PCT_CHILD_DISAB",
"ACS_PCT_NONVET_DISABLE_18_64",
"ACS_PCT_VET_DISABLE_18_64"
 ]]
y = data[['Obesity among adults aged >=18 years',
 'Current asthma among adults aged >=18 years',
 'Current smoking among adults aged >=18 years',
 'Mammography use among women aged 50-74 years',
 'Fair or poor self-rated health status among adults aged >=18 years',
 'Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50-75 years',
 'Cervical cancer screening among adult women aged 21-65 years',
 'Physical health not good for >=14 days among adults aged >=18 years',
 'Visits to dentist or dental clinic among adults aged >=18 years',
 'Hearing disability among adults aged >=18 years',
 'Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years',

 'No leisure-time physical activity among adults aged >=18 years',
 'Cognitive disability among adults ages >=18 years',
 'High cholesterol among adults aged >=18 years who have been screened in the past 5 years',
 'Coronary heart disease among adults aged >=18 years',
 'Depression among adults aged >=18 years',
 'High blood pressure among adults aged >=18 years',
 'Arthritis among adults aged >=18 years',
 'All teeth lost among adults aged >=65 years',
 'Cholesterol screening among adults aged >=18 years',
 'Chronic kidney disease among adults aged >=18 years',
 'Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening',
 'Mobility disability among adults aged >=18 years',
 'Diagnosed diabetes among adults aged >=18 years',
 'Independent living disability among adults aged >=18 years',
 'Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure',
 'Binge drinking among adults aged >=18 years',
 'Stroke among adults aged >=18 years',
 'Vision disability among adults aged >=18 years',
 'Self-care disability among adults aged >=18 years',
 'Cancer (excluding skin cancer) among adults aged >=18 years',
 'Visits to doctor for routine checkup within the past year among adults aged >=18 years',
 'Mental health not good for >=14 days among adults aged >=18 years',
 'Chronic obstructive pulmonary disease among adults aged >=18 years',
 'Current lack of health insurance among adults aged 18-64 years',
 'Any disability among adults aged >=18 years']]



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

feature_importance = model.feature_importances_

# Create a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})

# Sort the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
# plt.title('Feature Importance')
plt.show()



"""## Model Implementation"""



feature_importance_df



# Select the relevant columns from df_plotting
columns_of_interest = ['PCA_Variable'] + TechnicalRisk_Feature
subset_df = df_plotting[columns_of_interest]

# Calculate correlation matrix
correlation_matrix = subset_df.corr()

# Extract correlation of 'PCA_Variable' with all other features
pca_variable_corr = correlation_matrix['PCA_Variable']

# Display correlation values
print("Correlation between PCA_Variable and other features:")
print(pca_variable_corr)
pca_variable_corr1=pca_variable_corr[feature_importance_df['Feature']]
pca_variable_corr1



Multiplying_Factor=[]
# Iterate over each row in the correlation matrix

for index, row in pca_variable_corr1.items():
    print( index, row)
    if row>0:
      Multiplying_Factor.append(1)
    else :
      Multiplying_Factor.append(-1)
print(Multiplying_Factor)
feature_importance_df['MF']=Multiplying_Factor
feature_importance_df



feature_importance_df['Weights']=feature_importance_df['Importance']*feature_importance_df['MF']
feature_importance_df





weighted_avgs = []
# Iterate over each row in df_plotting
for idx, row in df_plotting.iterrows():
    # Initialize a variable to store the sum of weighted values
    weighted_sum = 0

    # Iterate over each feature in the 'Feature' column of feature_importance_df
    for feature, weight in zip(feature_importance_df['Feature'], feature_importance_df['Weights']):
        # Calculate the weighted value for the current feature
        weighted_value = row[feature] * weight

        # Add the weighted value to the sum
        weighted_sum += weighted_value

    # Calculate the weighted average for the current row
    weighted_avg = weighted_sum / feature_importance_df['Weights'].sum()

    # Append the weighted average to the list
    weighted_avgs.append(weighted_avg)
# Add the list of weighted averages as a new column to df_plotting
df_plotting['Technical_RiskScore'] = weighted_avgs

df_plotting



plt.figure(figsize=(8, 6))
plt.scatter(df_plotting['Technical_RiskScore'], df_plotting['PCA_Variable'], alpha=0.5)
plt.title('Scatter Plot of Technical_RiskScore vs PCA_Variable')
plt.xlabel('Technical_RiskScore')
plt.ylabel('PCA_Variable')
plt.grid(True)
plt.show()

